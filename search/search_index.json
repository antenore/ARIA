{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ARIA Documentation","text":"<p>Welcome to the ARIA (AI Responsibility and Integration Assistant) documentation. ARIA helps you manage AI participation in your software projects through flexible policies and templates.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Quick Start Guide</li> <li>Working with Templates</li> <li>Understanding Policy Inheritance</li> <li>Policy Validation Guide</li> <li>Command Line Interface</li> <li>Integration Guide</li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Basic Policy</li> <li>Inherited Policy</li> <li>Template Usage Examples</li> <li>Policy Format Examples</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Policy API</li> <li>Templates API</li> <li>Validator API</li> <li>CLI API</li> <li>Configuration API</li> </ul>"},{"location":"#technical-documentation","title":"Technical Documentation","text":"<ul> <li>Policy Architecture</li> <li>Template System</li> <li>Validation System</li> </ul>"},{"location":"#cicd-integration","title":"CI/CD Integration","text":"<ul> <li>GitHub Actions</li> <li>GitLab CI</li> <li>Jenkins Pipeline</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple CLI Interface</li> <li>Intuitive command structure</li> <li>Command aliases for common operations</li> <li>Progress indicators for long-running tasks</li> <li> <p>Rich console output with color-coding</p> </li> <li> <p>Policy Management</p> </li> <li>Create and validate policies</li> <li>Apply templates</li> <li>Flexible policy models</li> <li>YAML-based configuration</li> <li> <p>Support for capability-based and model-based policies</p> </li> <li> <p>Template System</p> </li> <li>Pre-defined templates for common scenarios</li> <li>Custom template support</li> <li>Template versioning</li> <li>Easy template application</li> <li> <p>Support for multiple template formats</p> </li> <li> <p>Advanced Validation</p> </li> <li>Dual-purpose validator for testing and production</li> <li>Strict validation mode with detailed warnings</li> <li>Clear error messages and suggestions</li> <li>Support for multiple policy formats</li> <li>Path-specific validation rules</li> <li> <p>ValidationResult class with comprehensive feedback</p> </li> <li> <p>Error Handling</p> </li> <li>Comprehensive error messages</li> <li>Proper exit codes</li> <li>Detailed logging</li> <li> <p>Input validation</p> </li> <li> <p>Policy Formats</p> </li> <li>Capability-based format for testing and development</li> <li>Model-based format for production environments</li> <li>Automatic format detection</li> <li>Format-specific validation rules</li> <li>Inheritance support for both formats</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code># Install ARIA using pip\npython -m pip install --user aria-policy\n</code></pre>"},{"location":"#quick-commands","title":"Quick Commands","text":"<pre><code># Create a new capability-based policy\naria init -f capability -o policy.yml\n\n# Create a new model-based policy\naria init -m assistant -f model -o policy.yml\n\n# List templates\naria ls\n\n# Apply a capability-based template\naria apply basic_capabilities -f capability -o policy.yml\n\n# Apply a model-based template\naria apply basic_model -f model -o policy.yml\n\n# Validate a policy with automatic format detection\naria validate policy.yml\n\n# Validate with strict validation\naria validate policy.yml --strict\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>For more information about contributing to ARIA, please read our Contributing Guide.</p>"},{"location":"#license","title":"License","text":"<p>For license information, see our License.</p>"},{"location":"GITHUB_PAGES_SETUP/","title":"GitHub Pages Setup Instructions","text":"<p>To ensure the documentation is properly deployed to GitHub Pages, follow these steps:</p>"},{"location":"GITHUB_PAGES_SETUP/#1-set-up-a-deploy-key-for-github-actions","title":"1. Set up a Deploy Key for GitHub Actions","text":"<p>The GitHub Actions workflow needs permission to push to your repository. Here's how to set up a deploy key:</p> <ol> <li> <p>Generate a new SSH key pair on your local machine (do not use your personal SSH key):    <pre><code>ssh-keygen -t ed25519 -C \"github-actions-deploy@github.com\" -f gh-pages-deploy\n</code></pre>    This will create two files: <code>gh-pages-deploy</code> (private key) and <code>gh-pages-deploy.pub</code> (public key)</p> </li> <li> <p>Add the public key to your repository:</p> </li> <li>Go to your GitHub repository</li> <li>Click on \"Settings\" &gt; \"Deploy keys\" &gt; \"Add deploy key\"</li> <li>Title: \"GitHub Actions Deploy Key\"</li> <li>Key: Paste the contents of <code>gh-pages-deploy.pub</code></li> <li>Check \"Allow write access\"</li> <li> <p>Click \"Add key\"</p> </li> <li> <p>Add the private key as a repository secret:</p> </li> <li>Go to your GitHub repository</li> <li>Click on \"Settings\" &gt; \"Secrets and variables\" &gt; \"Actions\"</li> <li>Click \"New repository secret\"</li> <li>Name: <code>ACTIONS_DEPLOY_KEY</code></li> <li>Value: Paste the contents of the <code>gh-pages-deploy</code> file (the private key)</li> <li> <p>Click \"Add secret\"</p> </li> <li> <p>Delete the key files from your local machine after adding them to GitHub:    <pre><code>rm gh-pages-deploy gh-pages-deploy.pub\n</code></pre></p> </li> </ol>"},{"location":"GITHUB_PAGES_SETUP/#2-configure-github-pages","title":"2. Configure GitHub Pages","text":"<p>After setting up the deploy key and pushing the updated workflow:</p> <ol> <li>Commit and push the updated CI workflow to your repository</li> <li>The GitHub Actions workflow will automatically create a <code>gh-pages</code> branch when it runs</li> <li>After the workflow completes successfully, go to your GitHub repository settings</li> <li>Navigate to \"Pages\" in the left sidebar</li> <li>Under \"Build and deployment\" &gt; \"Source\", select \"Deploy from a branch\"</li> <li>Under \"Branch\", select \"gh-pages\" and \"/ (root)\"</li> <li>Click \"Save\"</li> </ol>"},{"location":"GITHUB_PAGES_SETUP/#important-notes","title":"Important Notes","text":"<ul> <li>The CI workflow will automatically create the <code>gh-pages</code> branch on the first successful run</li> <li>You should no longer use the <code>docs</code> folder as the source for GitHub Pages</li> <li>The documentation will be automatically updated whenever changes are pushed to the main branch</li> <li>The deployment only happens after all tests pass</li> <li>The deploy key is specific to this repository and cannot be used elsewhere</li> </ul>"},{"location":"GITHUB_PAGES_SETUP/#troubleshooting","title":"Troubleshooting","text":"<p>If the documentation is not updating:</p> <ol> <li>Check the GitHub Actions workflow runs to ensure the deployment step completed successfully</li> <li>Verify that the GitHub Pages settings are configured to use the <code>gh-pages</code> branch</li> <li>Clear your browser cache or try viewing the site in an incognito/private window</li> <li>Check if there are any GitHub Pages build errors in the repository settings</li> <li>Ensure the deploy key has been properly set up with write access</li> </ol>"},{"location":"GITHUB_PAGES_SETUP/#manual-deployment","title":"Manual Deployment","text":"<p>If needed, you can manually deploy the documentation:</p> <p>```bash</p>"},{"location":"GITHUB_PAGES_SETUP/#install-mkdocs-and-plugins","title":"Install MkDocs and plugins","text":"<p>pip install mkdocs mkdocs-material mkdocs-minify-plugin mkdocs-exclude</p>"},{"location":"GITHUB_PAGES_SETUP/#build-the-documentation","title":"Build the documentation","text":"<p>mkdocs build</p>"},{"location":"GITHUB_PAGES_SETUP/#deploy-to-github-pages-this-will-create-the-gh-pages-branch-if-it-doesnt-exist","title":"Deploy to GitHub Pages (this will create the gh-pages branch if it doesn't exist)","text":"<p>mkdocs gh-deploy --force</p>"},{"location":"api/cli/","title":"CLI Module API Reference","text":"<p>::: aria.cli     options:       show_source: true       show_root_heading: true       show_category_heading: true</p>"},{"location":"api/cli/#command-groups","title":"Command Groups","text":""},{"location":"api/cli/#main-cli-group","title":"Main CLI Group","text":"<p>The main entry point for the ARIA CLI.</p> <pre><code>@click.group()\ndef cli():\n    \"\"\"ARIA - AI Participation Manager.\"\"\"\n    pass\n</code></pre>"},{"location":"api/cli/#template-commands","title":"Template Commands","text":"<p>Commands for managing templates:</p> <ul> <li><code>list</code> - List available templates</li> <li><code>apply</code> - Apply a template to create a policy</li> </ul>"},{"location":"api/cli/#policy-commands","title":"Policy Commands","text":"<p>Commands for managing policies:</p> <ul> <li><code>validate</code> - Validate a policy file</li> </ul>"},{"location":"api/cli/#decorators","title":"Decorators","text":""},{"location":"api/cli/#handle_error","title":"@handle_error","text":"<p>Error handling decorator that provides consistent error handling across all commands.</p> <pre><code>def handle_error(func):\n    \"\"\"Decorator to handle errors in CLI commands.\"\"\"\n    pass\n</code></pre>"},{"location":"api/cli/#with_progress","title":"@with_progress","text":"<p>Progress indicator decorator for long-running operations.</p> <pre><code>def with_progress(description: str):\n    \"\"\"Decorator to add progress indicator for long-running operations.\"\"\"\n    pass\n</code></pre>"},{"location":"api/cli/#command-aliases","title":"Command Aliases","text":"<p>The CLI provides several aliases for commonly used commands:</p> <pre><code>@cli.command(name='ls')\ndef list_templates_alias():\n    \"\"\"Alias for 'template list'\"\"\"\n    pass\n\n@cli.command(name='apply')\ndef apply_alias():\n    \"\"\"Alias for 'template apply'\"\"\"\n    pass\n\n@cli.command(name='validate')\ndef validate_alias():\n    \"\"\"Alias for 'policy validate'\"\"\"\n    pass\n</code></pre>"},{"location":"api/cli/#progress-indicators","title":"Progress Indicators","text":"<p>The CLI uses Rich's progress bars and spinners to provide visual feedback:</p> <pre><code>with Progress(\n    SpinnerColumn(),\n    TextColumn(\"[progress.description]{task.description}\"),\n    console=console,\n) as progress:\n    task = progress.add_task(description)\n    # Perform operation\n</code></pre>"},{"location":"api/cli/#error-handling","title":"Error Handling","text":"<p>All commands use the <code>handle_error</code> decorator to ensure consistent error handling:</p> <ol> <li>Catch all exceptions</li> <li>Log the error</li> <li>Display user-friendly message</li> <li>Exit with appropriate code</li> </ol>"},{"location":"api/config/","title":"Configuration API Reference","text":""},{"location":"api/config/#overview","title":"Overview","text":"<p>The Configuration API provides interfaces for managing ARIA configuration settings.</p>"},{"location":"api/config/#classes","title":"Classes","text":""},{"location":"api/config/#config","title":"Config","text":"<pre><code>class Config:\n    \"\"\"Manages ARIA configuration settings.\"\"\"\n\n    def __init__(self, path: Optional[str] = None):\n        \"\"\"Initialize configuration.\"\"\"\n\n    def load(self) -&gt; Dict:\n        \"\"\"Load configuration from file.\"\"\"\n\n    def save(self) -&gt; None:\n        \"\"\"Save configuration to file.\"\"\"\n\n    def get(self, key: str, default: Any = None) -&gt; Any:\n        \"\"\"Get a configuration value.\"\"\"\n</code></pre>"},{"location":"api/config/#configmanager","title":"ConfigManager","text":"<pre><code>class ConfigManager:\n    \"\"\"Manages global and local configurations.\"\"\"\n\n    def get_global_config(self) -&gt; Config:\n        \"\"\"Get global configuration.\"\"\"\n\n    def get_local_config(self) -&gt; Config:\n        \"\"\"Get local configuration.\"\"\"\n\n    def merge_configs(self, global_config: Config, local_config: Config) -&gt; Config:\n        \"\"\"Merge global and local configurations.\"\"\"\n</code></pre>"},{"location":"api/config/#configuration-file-format","title":"Configuration File Format","text":"<pre><code># Global configuration\nglobal:\n  default_model: gpt-4\n  log_level: info\n  templates_dir: ~/.aria/templates\n\n# Local configuration\nlocal:\n  model: gpt-3.5-turbo\n  max_tokens: 2000\n  temperature: 0.7\n</code></pre>"},{"location":"api/config/#usage-examples","title":"Usage Examples","text":"<pre><code># Load configuration\nconfig = Config()\nconfig.load()\n\n# Get specific settings\nmodel = config.get(\"model\", \"gpt-4\")\ntemperature = config.get(\"temperature\", 0.7)\n\n# Save changes\nconfig.save()\n</code></pre>"},{"location":"api/config/#best-practices","title":"Best Practices","text":"<ol> <li>Use environment variables</li> <li>Separate global/local configs</li> <li>Version control configs</li> <li>Document changes</li> </ol>"},{"location":"api/config/#see-also","title":"See Also","text":"<ul> <li>Policy API</li> <li>Templates API</li> <li>Configuration Guide</li> </ul>"},{"location":"api/policy/","title":"Policy API Reference","text":""},{"location":"api/policy/#overview","title":"Overview","text":"<p>The Policy API provides interfaces for creating, managing, and validating ARIA policies. The system supports two policy formats: capability-based (primarily for testing) and model-based (for production).</p>"},{"location":"api/policy/#policy-formats","title":"Policy Formats","text":""},{"location":"api/policy/#capability-based-policy","title":"Capability-Based Policy","text":"<pre><code>version: \"1.0.0\"\nname: \"Test Policy\"\ndescription: \"A comprehensive test policy.\"\ncapabilities:\n  - name: \"code_generation\"\n    description: \"Generate code based on user requirements.\"\n    allowed: true\n    conditions:\n      - \"Must include appropriate comments.\"\nrestrictions:\n  - \"Must not retain user data beyond the session.\"\n</code></pre>"},{"location":"api/policy/#model-based-policy","title":"Model-Based Policy","text":"<pre><code>version: \"1.0.0\"\nname: \"Production Policy\"\nmodel: \"assistant\"\ndefaults:\n  allow:\n    - \"review\"\n    - \"suggest\"\n  require:\n    - \"human_review\"\npaths:\n  \"src/**/*.py\":\n    allow:\n      - \"generate\"\n      - \"modify\"\n</code></pre>"},{"location":"api/policy/#classes","title":"Classes","text":""},{"location":"api/policy/#policy","title":"Policy","text":"<pre><code>class Policy:\n    \"\"\"Represents an ARIA policy configuration.\n\n    Supports both capability-based and model-based policy formats.\n    \"\"\"\n\n    def __init__(self, name: str, version: str = \"1.0.0\", policy_type: str = \"capability\"):\n        \"\"\"Initialize a new policy.\n\n        Args:\n            name: Policy name\n            version: Policy version (default: \"1.0.0\")\n            policy_type: Type of policy (\"capability\" or \"model\")\n        \"\"\"\n\n    def validate(self, strict: bool = False) -&gt; ValidationResult:\n        \"\"\"Validate the policy configuration.\n\n        Args:\n            strict: Enable strict validation mode\n\n        Returns:\n            ValidationResult object with validation status and messages\n        \"\"\"\n\n    def apply_template(self, template: str) -&gt; None:\n        \"\"\"Apply a template to this policy.\"\"\"\n</code></pre>"},{"location":"api/policy/#policymanager","title":"PolicyManager","text":"<pre><code>class PolicyManager:\n    \"\"\"Manages policy operations and inheritance.\"\"\"\n\n    def load(self, path: str) -&gt; Policy:\n        \"\"\"Load a policy from file.\"\"\"\n\n    def save(self, policy: Policy, path: str) -&gt; None:\n        \"\"\"Save a policy to file.\"\"\"\n\n    def merge(self, base: Policy, child: Policy) -&gt; Policy:\n        \"\"\"Merge two policies following inheritance rules.\"\"\"\n</code></pre>"},{"location":"api/policy/#usage-examples","title":"Usage Examples","text":"<pre><code># Create a new capability-based policy\npolicy = Policy(\"test_assistant\", policy_type=\"capability\")\npolicy.add_capability(\"code_generation\", allowed=True)\npolicy.add_restriction(\"Must not retain user data beyond the session.\")\n\n# Create a new model-based policy\nmodel_policy = Policy(\"production_assistant\", policy_type=\"model\")\nmodel_policy.set_model(\"assistant\")\nmodel_policy.add_default_allow(\"review\", \"suggest\")\nmodel_policy.add_path_rule(\"src/**/*.py\", allow=[\"generate\", \"modify\"])\n\n# Validate policies\nvalidator = PolicyValidator()\nresult = validator.validate_policy(policy.as_dict(), strict=True)\nif result.valid:\n    print(\"Policy is valid!\")\nelse:\n    print(\"Validation errors:\", result.errors)\n</code></pre>"},{"location":"api/policy/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the appropriate policy format for your use case</li> <li>Capability-based for testing and human-readable policies</li> <li>Model-based for production and integration with code repositories</li> <li>Always validate policies after changes</li> <li>Use version control</li> <li>Document policy changes</li> <li>Test inheritance chains</li> <li>Use strict validation during development</li> </ol>"},{"location":"api/policy/#see-also","title":"See Also","text":"<ul> <li>Templates API</li> <li>Validator API</li> <li>Policy Validation Guide</li> <li>Policy Format Examples</li> </ul>"},{"location":"api/templates/","title":"Templates API Reference","text":""},{"location":"api/templates/#overview","title":"Overview","text":"<p>The Templates API provides functionality for creating, managing, and applying ARIA templates. Templates support both capability-based and model-based policy formats.</p>"},{"location":"api/templates/#classes","title":"Classes","text":""},{"location":"api/templates/#template","title":"Template","text":"<pre><code>class Template:\n    \"\"\"Represents an ARIA template.\n\n    Templates can be used to create both capability-based and model-based policies.\n    \"\"\"\n\n    def __init__(self, name: str, version: str = \"1.0.0\", template_type: str = \"capability\"):\n        \"\"\"Initialize a new template.\n\n        Args:\n            name: Template name\n            version: Template version (default: \"1.0.0\")\n            template_type: Type of template (\"capability\" or \"model\")\n        \"\"\"\n\n    def validate(self, strict: bool = False) -&gt; ValidationResult:\n        \"\"\"Validate the template structure.\n\n        Args:\n            strict: Enable strict validation mode\n\n        Returns:\n            ValidationResult object with validation status and messages\n        \"\"\"\n\n    def apply(self, policy: Policy) -&gt; None:\n        \"\"\"Apply this template to a policy.\"\"\"\n\n    def get_parameters(self) -&gt; List[Dict[str, Any]]:\n        \"\"\"Get template parameters.\"\"\"\n\n    def set_parameter(self, name: str, value: Any) -&gt; None:\n        \"\"\"Set a parameter value.\"\"\"\n</code></pre>"},{"location":"api/templates/#templatemanager","title":"TemplateManager","text":"<pre><code>class TemplateManager:\n    \"\"\"Manages template operations.\"\"\"\n\n    def load(self, path: str) -&gt; Template:\n        \"\"\"Load a template from file.\"\"\"\n\n    def save(self, template: Template, path: str) -&gt; None:\n        \"\"\"Save a template to file.\"\"\"\n\n    def list_templates(self, directory: str = None) -&gt; List[str]:\n        \"\"\"List available templates.\n\n        Args:\n            directory: Optional directory to search for templates\n\n        Returns:\n            List of template names\n        \"\"\"\n\n    def get_template_info(self, name: str) -&gt; Dict[str, Any]:\n        \"\"\"Get detailed information about a template.\n\n        Args:\n            name: Template name\n\n        Returns:\n            Dictionary with template metadata\n        \"\"\"\n</code></pre>"},{"location":"api/templates/#template-formats","title":"Template Formats","text":""},{"location":"api/templates/#capability-based-template","title":"Capability-Based Template","text":"<pre><code>name: capability_template\nversion: 1.0.0\ndescription: Template for capability-based policies\ntype: capability\nparameters:\n  - name: capability_level\n    type: string\n    description: Level of capabilities to enable\n    default: basic\n    options:\n      - basic\n      - advanced\n      - expert\ncapabilities:\n  - name: code_generation\n    description: Generate code based on user requirements\n    allowed: true\n    conditions:\n      - Must include appropriate comments.\n  - name: data_analysis\n    description: Analyze data provided by the user\n    allowed: true\n    conditions:\n      - Must maintain data privacy.\nrestrictions:\n  - Must not retain user data beyond the session.\n</code></pre>"},{"location":"api/templates/#model-based-template","title":"Model-Based Template","text":"<pre><code>name: model_template\nversion: 1.0.0\ndescription: Template for model-based policies\ntype: model\nparameters:\n  - name: security_level\n    type: string\n    description: Security level for the policy\n    default: standard\n    options:\n      - minimal\n      - standard\n      - strict\nmodel: assistant\ndefaults:\n  allow:\n    - review\n    - suggest\n  require:\n    - human_review\npaths:\n  \"src/**/*.py\":\n    allow:\n      - generate\n      - modify\n    require:\n      - unit_tests\n</code></pre>"},{"location":"api/templates/#usage-examples","title":"Usage Examples","text":"<pre><code># Create a new capability-based template\ntemplate = Template(\"chat_assistant\", template_type=\"capability\")\ntemplate.add_capability(\"text_generation\", allowed=True)\ntemplate.add_restriction(\"Must not retain user data beyond the session.\")\n\n# Create a new model-based template\nmodel_template = Template(\"code_assistant\", template_type=\"model\")\nmodel_template.set_model(\"assistant\")\nmodel_template.add_default_allow(\"review\", \"suggest\")\nmodel_template.add_path_rule(\"src/**/*.py\", allow=[\"generate\", \"modify\"])\n\n# Save templates\nmanager = TemplateManager()\nmanager.save(template, \"chat_template.yml\")\nmanager.save(model_template, \"code_template.yml\")\n\n# List available templates\ntemplates = manager.list_templates()\nfor template_name in templates:\n    info = manager.get_template_info(template_name)\n    print(f\"{info['name']} (v{info['version']}): {info['description']}\")\n</code></pre>"},{"location":"api/templates/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the appropriate template format for your use case</li> <li>Capability-based for testing and human-readable policies</li> <li>Model-based for production and integration with code repositories</li> <li>Version your templates</li> <li>Document parameters and their purpose</li> <li>Test templates with different parameter values</li> <li>Keep templates focused on specific use cases</li> </ol>"},{"location":"api/templates/#see-also","title":"See Also","text":"<ul> <li>Policy API</li> <li>Validator API</li> <li>Templates Guide</li> <li>Example Templates</li> <li>Policy Format Examples</li> </ul>"},{"location":"api/validator/","title":"Validator API Reference","text":""},{"location":"api/validator/#overview","title":"Overview","text":"<p>The Validator API provides tools for validating ARIA policies and templates. The validator supports both capability-based policies (primarily used for testing) and model-based policies (used in production).</p>"},{"location":"api/validator/#classes","title":"Classes","text":""},{"location":"api/validator/#validationresult","title":"ValidationResult","text":"<pre><code>class ValidationResult:\n    \"\"\"Represents a policy validation result.\n\n    Attributes:\n        valid: Whether validation passed\n        errors: List of validation errors\n        warnings: List of validation warnings\n    \"\"\"\n\n    def add_error(self, message: str) -&gt; None:\n        \"\"\"Add an error message.\"\"\"\n\n    def add_warning(self, message: str) -&gt; None:\n        \"\"\"Add a warning message.\"\"\"\n\n    def as_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert result to dictionary.\"\"\"\n</code></pre>"},{"location":"api/validator/#policyvalidator","title":"PolicyValidator","text":"<pre><code>class PolicyValidator:\n    \"\"\"Validates AI participation policies.\n\n    This validator supports two policy formats:\n    1. Capability-based policies - Used primarily for testing, with capabilities, \n       conditions, and restrictions\n    2. Model-based policies - Used in production, with model types, defaults, and paths\n\n    Attributes:\n        REQUIRED_FIELDS: Set of required fields in policy\n        OPTIONAL_FIELDS: Set of optional fields in policy\n        MODEL_REQUIREMENTS: Valid requirements for each model\n        MODEL_ACTIONS: Valid actions for each model\n    \"\"\"\n\n    def validate_file(self, path: Union[str, Path], strict: bool = False) -&gt; ValidationResult:\n        \"\"\"Validate a policy file.\"\"\"\n\n    def validate_policy(self, policy: Dict[str, Any], strict: bool = False) -&gt; ValidationResult:\n        \"\"\"Validate policy data.\n\n        Supports both capability-based policies (for testing) and model-based policies\n        (for production).\n        \"\"\"\n</code></pre>"},{"location":"api/validator/#usage-examples","title":"Usage Examples","text":"<pre><code># Validate a policy file\nvalidator = PolicyValidator()\nresult = validator.validate_file(\"aria-policy.yml\")\nif result.valid:\n    print(\"Policy is valid\")\nelse:\n    print(\"Errors:\", result.errors)\n    print(\"Warnings:\", result.warnings)\n\n# Validate a policy dictionary with strict validation\npolicy_data = {\n    \"version\": \"1.0.0\",\n    \"name\": \"Test Policy\",\n    \"description\": \"A comprehensive test policy.\",\n    \"capabilities\": [\n        {\n            \"name\": \"test_capability\",\n            \"description\": \"A detailed test capability description.\",\n            \"allowed\": True,\n            \"conditions\": [\"Must follow all testing guidelines.\"]\n        }\n    ],\n    \"restrictions\": [\"No unauthorized testing.\"]\n}\nresult = validator.validate_policy(policy_data, strict=True)\nif result.valid:\n    print(\"Policy is valid\")\n    if result.warnings:\n        print(\"Warnings:\", result.warnings)\nelse:\n    print(\"Errors:\", result.errors)\n</code></pre>"},{"location":"api/validator/#validation-rules","title":"Validation Rules","text":""},{"location":"api/validator/#required-fields","title":"Required Fields","text":"<ul> <li><code>version</code>: String, policy version (required)</li> <li><code>name</code>: String, policy name (required)</li> </ul>"},{"location":"api/validator/#optional-fields","title":"Optional Fields","text":"<ul> <li><code>description</code>: String, policy description</li> <li><code>capabilities</code>: List of capability dictionaries</li> <li><code>restrictions</code>: List of restriction strings</li> <li><code>model</code>: String, policy model type</li> <li><code>defaults</code>: Dictionary of default rules</li> <li><code>paths</code>: Dictionary of path-specific rules</li> </ul>"},{"location":"api/validator/#strict-validation","title":"Strict Validation","text":"<p>When strict validation is enabled, the validator performs additional checks: - Version format (semantic versioning) - Description length - Capability description length - Condition format (ending with a period) - Path pattern validity</p>"},{"location":"api/validator/#best-practices","title":"Best Practices","text":"<ol> <li>Always validate before saving or applying policies</li> <li>Use strict validation during development</li> <li>Handle validation errors and warnings appropriately</li> <li>Provide clear error messages to users</li> </ol>"},{"location":"api/validator/#see-also","title":"See Also","text":"<ul> <li>Policy API</li> <li>Templates API</li> <li>Validation Guide</li> </ul>"},{"location":"ci/github-actions/","title":"GitHub Actions Integration","text":""},{"location":"ci/github-actions/#overview","title":"Overview","text":"<p>This guide explains how to integrate ARIA with GitHub Actions for automated policy validation and deployment.</p>"},{"location":"ci/github-actions/#workflow-example","title":"Workflow Example","text":"<pre><code>name: ARIA Policy Validation\n\non:\n  push:\n    paths:\n      - 'policies/**'\n      - 'templates/**'\n  pull_request:\n    paths:\n      - 'policies/**'\n      - 'templates/**'\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install ARIA\n        run: |\n          python -m pip install --upgrade pip\n          pip install aria-policy\n\n      - name: Validate Policies\n        run: |\n          aria validate policies/\n\n      - name: Test Templates\n        run: |\n          aria test-templates templates/\n</code></pre>"},{"location":"ci/github-actions/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Create <code>.github/workflows</code> directory</li> <li>Add workflow YAML file</li> <li>Configure secrets</li> <li>Enable GitHub Actions</li> </ol>"},{"location":"ci/github-actions/#best-practices","title":"Best Practices","text":"<ol> <li>Version control policies</li> <li>Automated testing</li> <li>Clear error reporting</li> <li>Documentation updates</li> </ol>"},{"location":"ci/github-actions/#see-also","title":"See Also","text":"<ul> <li>GitLab CI</li> <li>Jenkins Pipeline</li> <li>Policy Validation</li> </ul>"},{"location":"ci/gitlab-ci/","title":"GitLab CI Integration","text":""},{"location":"ci/gitlab-ci/#overview","title":"Overview","text":"<p>This guide explains how to integrate ARIA with GitLab CI/CD for automated policy validation and deployment.</p>"},{"location":"ci/gitlab-ci/#pipeline-example","title":"Pipeline Example","text":"<pre><code>image: python:3.8\n\nstages:\n  - validate\n  - test\n  - deploy\n\nvariables:\n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.pip-cache\"\n\ncache:\n  paths:\n    - .pip-cache/\n\nvalidate_policies:\n  stage: validate\n  script:\n    - pip install aria-policy\n    - aria validate policies/\n  rules:\n    - changes:\n        - policies/**/*\n        - templates/**/*\n\ntest_templates:\n  stage: test\n  script:\n    - pip install aria-policy\n    - aria test-templates templates/\n  rules:\n    - changes:\n        - templates/**/*\n\ndeploy_policies:\n  stage: deploy\n  script:\n    - pip install aria-policy\n    - aria deploy policies/\n  only:\n    - main\n  when: manual\n</code></pre>"},{"location":"ci/gitlab-ci/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Add <code>.gitlab-ci.yml</code></li> <li>Configure CI/CD variables</li> <li>Enable GitLab CI/CD</li> <li>Set up runners</li> </ol>"},{"location":"ci/gitlab-ci/#best-practices","title":"Best Practices","text":"<ol> <li>Stage organization</li> <li>Caching strategy</li> <li>Error handling</li> <li>Documentation</li> </ol>"},{"location":"ci/gitlab-ci/#see-also","title":"See Also","text":"<ul> <li>GitHub Actions</li> <li>Jenkins Pipeline</li> <li>Deployment Guide</li> </ul>"},{"location":"ci/jenkins/","title":"Jenkins Pipeline Integration","text":""},{"location":"ci/jenkins/#overview","title":"Overview","text":"<p>This guide explains how to integrate ARIA with Jenkins Pipeline for automated policy validation and deployment.</p>"},{"location":"ci/jenkins/#pipeline-example","title":"Pipeline Example","text":"<pre><code>pipeline {\n    agent {\n        docker {\n            image 'python:3.8'\n        }\n    }\n\n    stages {\n        stage('Setup') {\n            steps {\n                sh 'python -m pip install --upgrade pip'\n                sh 'pip install aria-policy'\n            }\n        }\n\n        stage('Validate') {\n            when {\n                changeset 'policies/**'\n            }\n            steps {\n                sh 'aria validate policies/'\n            }\n        }\n\n        stage('Test Templates') {\n            when {\n                changeset 'templates/**'\n            }\n            steps {\n                sh 'aria test-templates templates/'\n            }\n        }\n\n        stage('Deploy') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input 'Deploy policies?'\n                sh 'aria deploy policies/'\n            }\n        }\n    }\n\n    post {\n        always {\n            cleanWs()\n        }\n    }\n}\n</code></pre>"},{"location":"ci/jenkins/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Create <code>Jenkinsfile</code></li> <li>Configure Jenkins</li> <li>Set up credentials</li> <li>Enable pipeline</li> </ol>"},{"location":"ci/jenkins/#best-practices","title":"Best Practices","text":"<ol> <li>Pipeline organization</li> <li>Error handling</li> <li>Deployment strategy</li> <li>Documentation</li> </ol>"},{"location":"ci/jenkins/#see-also","title":"See Also","text":"<ul> <li>GitHub Actions</li> <li>GitLab CI</li> <li>Deployment Guide</li> </ul>"},{"location":"guides/cli/","title":"Command Line Interface","text":"<p>ARIA provides a powerful command-line interface (CLI) for managing AI participation policies and templates.</p>"},{"location":"guides/cli/#command-structure","title":"Command Structure","text":"<p>The CLI follows a simple and intuitive structure:</p> <pre><code>ariacli &lt;command&gt; [subcommand] [options]\n</code></pre>"},{"location":"guides/cli/#basic-commands","title":"Basic Commands","text":""},{"location":"guides/cli/#initialize-a-policy","title":"Initialize a Policy","text":"<p>Create a new policy file:</p> <pre><code>ariacli init [options]\n</code></pre> <p>Options: - <code>-m, --model MODEL</code> - Initial policy model (default: 'assistant') - <code>-o, --output FILE</code> - Output file for the policy (default: 'aria.yml') - <code>-t, --templates-dir DIR</code> - Directory containing templates - <code>-f, --format FORMAT</code> - Policy format: 'capability' or 'model' (default: 'model')</p>"},{"location":"guides/cli/#template-management","title":"Template Management","text":"<p>List available templates:</p> <pre><code>ariacli template list [options]\n# or use the shorter alias\nariacli ls\n</code></pre> <p>Options: - <code>-f, --format FORMAT</code> - Filter templates by format: 'capability' or 'model'</p> <p>Apply a template:</p> <pre><code>ariacli template apply NAME [options]\n# or use the shorter alias\nariacli apply NAME\n</code></pre> <p>Options: - <code>-t, --templates-dir DIR</code> - Directory containing templates - <code>-o, --output FILE</code> - Output file for the policy - <code>-f, --format FORMAT</code> - Template format: 'capability' or 'model' (default: 'model')</p>"},{"location":"guides/cli/#policy-management","title":"Policy Management","text":"<p>Validate a policy file:</p> <pre><code>ariacli policy validate FILE [options]\n# or use the shorter alias\nariacli validate FILE [options]\n</code></pre> <p>Options: - <code>-s, --strict</code> - Enable strict validation mode - <code>--format FORMAT</code> - Specify policy format for validation: 'capability', 'model', or 'auto' (default: 'auto')</p>"},{"location":"guides/cli/#command-aliases","title":"Command Aliases","text":"<p>ARIA provides convenient aliases for commonly used commands:</p> Full Command Alias Description <code>ariacli template list</code> <code>ariacli ls</code> List available templates <code>ariacli template apply</code> <code>ariacli apply</code> Apply a template <code>ariacli policy validate</code> <code>ariacli validate</code> Validate a policy file"},{"location":"guides/cli/#progress-indicators","title":"Progress Indicators","text":"<p>All commands now include progress indicators to provide feedback during long-running operations:</p> <ul> <li>Spinners for ongoing operations</li> <li>Clear success/error messages</li> <li>Rich console output with color-coding</li> </ul>"},{"location":"guides/cli/#error-handling","title":"Error Handling","text":"<p>The CLI provides comprehensive error handling:</p> <ul> <li>Descriptive error messages</li> <li>Proper exit codes (0 for success, 1 for errors)</li> <li>Logging of all operations</li> <li>Input validation before execution</li> </ul>"},{"location":"guides/cli/#examples","title":"Examples","text":"<ol> <li> <p>Create a new capability-based policy:    <pre><code>ariacli init -f capability -o my-policy.yml\n</code></pre></p> </li> <li> <p>Create a new model-based policy:    <pre><code>ariacli init -m assistant -f model -o my-policy.yml\n</code></pre></p> </li> <li> <p>List all available templates:    <pre><code>ariacli ls\n</code></pre></p> </li> <li> <p>List only capability-based templates:    <pre><code>ariacli ls -f capability\n</code></pre></p> </li> <li> <p>Apply a capability-based template:    <pre><code>ariacli apply basic_capabilities -f capability -o new-policy.yml\n</code></pre></p> </li> <li> <p>Apply a model-based template:    <pre><code>ariacli apply basic_model -f model -o new-policy.yml\n</code></pre></p> </li> <li> <p>Validate a policy with automatic format detection:    <pre><code>ariacli validate policy.yml\n</code></pre></p> </li> <li> <p>Validate a policy with strict validation:    <pre><code>ariacli validate policy.yml --strict\n</code></pre></p> </li> <li> <p>Validate a policy with explicit format:    <pre><code>ariacli validate policy.yml --format capability\n</code></pre></p> </li> </ol>"},{"location":"guides/cli/#additional-tools","title":"Additional Tools","text":"<p>ARIA includes additional utility tools:</p>"},{"location":"guides/cli/#ide-integration-commands","title":"IDE Integration Commands","text":"<p>ARIA provides commands for integrating with various IDEs:</p> <pre><code>ariacli ide [command] [options]\n</code></pre> <p>Available commands:</p>"},{"location":"guides/cli/#generate-ide-rules","title":"Generate IDE Rules","text":"<pre><code>ariacli ide rules [policy_file] [options]\n</code></pre> <p>Options: - <code>policy_file</code> - Path to ARIA policy file (optional, defaults to aria.yml) - <code>-i, --ide</code> - Target IDE (default: windsurf, options: windsurf, cursor, vscode, nvim, emacs) - <code>-o, --output</code> - Custom output file for rules (default depends on IDE)</p>"},{"location":"guides/cli/#generate-ide-ignore-files","title":"Generate IDE Ignore Files","text":"<pre><code>ariacli ide ignore [policy_file] [options]\n</code></pre> <p>Options: - <code>policy_file</code> - Path to ARIA policy file (optional, defaults to aria.yml) - <code>-i, --ide</code> - Target IDE (default: windsurf, options: windsurf, cursor) - <code>-o, --output</code> - Custom output file for ignore patterns (default depends on IDE)</p>"},{"location":"guides/cli/#generate-both-rules-and-ignore-files","title":"Generate Both Rules and Ignore Files","text":"<pre><code>ariacli ide generate [policy_file] [options]\n</code></pre> <p>Options: - <code>policy_file</code> - Path to ARIA policy file (optional, defaults to aria.yml) - <code>-i, --ide</code> - Target IDE (default: windsurf, options: windsurf, cursor, vscode, nvim, emacs) - <code>--rules-output</code> - Custom output file for rules (default depends on IDE) - <code>--ignore-output</code> - Custom output file for ignore patterns (default depends on IDE) - <code>--no-ignore</code> - Skip generating ignore file</p> <p>Examples: <pre><code># Generate Windsurf rules from default policy\nariacli ide rules\n\n# Generate Cursor rules from a specific policy\nariacli ide rules my_policy.yml -i cursor\n\n# Generate both rules and ignore file for Windsurf\nariacli ide generate my_policy.yml\n\n# Generate both rules and ignore file for Cursor with custom ignore file\nariacli ide generate -i cursor --ignore-output .custom_ignore\n</code></pre></p>"},{"location":"guides/cli/#policy-to-ide-rules-converter","title":"Policy to IDE Rules Converter","text":"<p>Convert ARIA policy files to various IDE rules formats:</p> <pre><code>python -m aria.tools.policy_to_iderules &lt;policy_file&gt; [-i &lt;ide&gt;] [-o &lt;output_file&gt;] [--ignore] [--ignore-output &lt;file&gt;]\n</code></pre> <p>Options: - <code>&lt;policy_file&gt;</code>: Path to ARIA policy file - <code>-i, --ide</code>: Target IDE (default: windsurf, options: windsurf, cursor, vscode, nvim, emacs) - <code>-o, --output</code>: Custom output file for rules (default depends on IDE) - <code>--ignore</code>: Also generate IDE ignore file (.codeiumignore for Windsurf, .cursorignore for Cursor) - <code>--ignore-output</code>: Custom output file for ignore patterns (default depends on IDE)</p> <p>Examples: <pre><code># Convert a policy to Windsurf rules\npython -m aria.tools.policy_to_iderules docs_protection_policy.yml\n\n# Convert a policy to Cursor rules\npython -m aria.tools.policy_to_iderules aria_policy.yml -i cursor\n\n# Convert a policy to a custom rules file\npython -m aria.tools.policy_to_iderules aria_policy.yml -o custom_rules.txt\n\n# Generate both rules and ignore file for Windsurf\npython -m aria.tools.policy_to_iderules aria_policy.yml --ignore\n\n# Generate both rules and ignore file for Cursor with custom ignore file\npython -m aria.tools.policy_to_iderules aria_policy.yml -i cursor --ignore --ignore-output .custom_ignore\n</code></pre></p> <p>This tool helps you quickly implement ARIA policies using existing IDE rule systems. The tool preserves existing content in rules files and only updates the ARIA policy section. When generating ignore files, it creates patterns that protect policy files and sensitive paths based on your ARIA policy.</p>"},{"location":"guides/cli/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>ARIA_TEMPLATES_DIR</code> - Default templates directory</li> <li><code>ARIA_LOG_LEVEL</code> - Logging level (default: INFO)</li> <li><code>ARIA_DEFAULT_FORMAT</code> - Default policy format (capability or model)</li> </ul>"},{"location":"guides/cli/#exit-codes","title":"Exit Codes","text":"<ul> <li>0: Success</li> <li>1: Error (with error message)</li> </ul>"},{"location":"guides/contributing/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to ARIA! This guide will help you get started.</p>"},{"location":"guides/contributing/#development-environment","title":"Development Environment","text":"<ol> <li> <p>Fork and clone the repository:    <pre><code>git clone https://github.com/yourusername/ARIA.git\ncd ARIA\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install development dependencies:    <pre><code>pip install -e .[test,docs]\n</code></pre></p> </li> </ol>"},{"location":"guides/contributing/#running-tests","title":"Running Tests","text":"<ol> <li> <p>Run unit tests:    <pre><code>python -m pytest\n</code></pre></p> </li> <li> <p>Run type checking:    <pre><code>mypy aria\n</code></pre></p> </li> <li> <p>Run linting:    <pre><code>flake8 aria tests\n</code></pre></p> </li> </ol>"},{"location":"guides/contributing/#coding-standards","title":"Coding Standards","text":"<ol> <li>Follow PEP 8 style guide</li> <li>Add type hints to all functions</li> <li>Write comprehensive docstrings</li> <li>Include unit tests for new features</li> <li>Update documentation as needed</li> </ol>"},{"location":"guides/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a feature branch</li> <li>Make your changes</li> <li>Run tests and linting</li> <li>Update documentation</li> <li>Submit a pull request</li> </ol>"},{"location":"guides/contributing/#documentation","title":"Documentation","text":"<ol> <li>Update relevant markdown files in <code>/docs</code></li> <li>Build docs locally:    <pre><code>mkdocs serve\n</code></pre></li> <li>Check for broken links and formatting</li> </ol>"},{"location":"guides/contributing/#need-help","title":"Need Help?","text":"<ul> <li>Open an issue for bugs</li> <li>Discuss features in discussions</li> <li>Ask questions in our community channels</li> </ul>"},{"location":"guides/getting-started/","title":"Getting Started with ARIA","text":"<p>This guide will help you get started with ARIA quickly and efficiently.</p>"},{"location":"guides/getting-started/#installation","title":"Installation","text":"<pre><code>python -m pip install --user aria-framework\n</code></pre>"},{"location":"guides/getting-started/#local-development-installation","title":"Local Development Installation","text":"<p>If you're working on ARIA itself or want to install from a local copy:</p> <pre><code># Clone the repository\ngit clone https://github.com/antenore/ARIA.git\ncd ARIA\n\n# Install in development mode\npython -m pip install --user -e .\n</code></pre> <p>Note: After installation, the <code>ariacli</code> command might not be available in your PATH. You can either: 1. Add the Python Scripts directory to your PATH (typically <code>%APPDATA%\\Python\\Python3xx\\Scripts</code> on Windows) 2. Use the full path to the executable: <code>%APPDATA%\\Python\\Python3xx\\Scripts\\ariacli.exe</code> 3. Create an alias in your shell profile</p>"},{"location":"guides/getting-started/#basic-usage","title":"Basic Usage","text":"<ol> <li> <p>Initialize a new policy:    <pre><code>ariacli init -m assistant -o policy.yml\n</code></pre></p> </li> <li> <p>Apply a template:    <pre><code>ariacli template apply chat_assistant -o policy.yml\n</code></pre></p> </li> <li> <p>Validate your policy:    <pre><code>ariacli policy validate policy.yml\n</code></pre></p> </li> </ol>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about policy inheritance</li> <li>Explore templates</li> <li>Check out the CLI reference</li> </ul>"},{"location":"guides/getting-started/#common-issues","title":"Common Issues","text":"<ul> <li>Permission errors</li> <li>Template compatibility</li> <li>Policy validation failures</li> </ul>"},{"location":"guides/getting-started/#best-practices","title":"Best Practices","text":"<ol> <li>Always validate policies</li> <li>Use version control</li> <li>Document policy changes</li> <li>Test before deployment</li> </ol>"},{"location":"guides/inheritance/","title":"Understanding Policy Inheritance","text":"<p>This guide explains ARIA's policy inheritance system, which works with both capability-based and model-based policies.</p>"},{"location":"guides/inheritance/#overview","title":"Overview","text":"<p>Policy inheritance allows you to: - Create hierarchical policies - Share common configurations - Override specific settings - Maintain consistency - Extend existing policies without duplication</p>"},{"location":"guides/inheritance/#inheritance-models","title":"Inheritance Models","text":"<p>ARIA supports inheritance for both policy formats:</p>"},{"location":"guides/inheritance/#capability-based-inheritance","title":"Capability-Based Inheritance","text":"<p>For capability-based policies, inheritance works by combining and overriding capabilities:</p> <pre><code># Base policy (capability-based)\nname: base_policy\nversion: 1.0.0\ncapabilities:\n  - name: text_generation\n    description: Generate text responses\n    allowed: true\n    conditions:\n      - Must follow content guidelines.\n  - name: code_analysis\n    description: Analyze code\n    allowed: true\n    conditions:\n      - Must not execute code.\nrestrictions:\n  - Must not retain user data.\n\n# Child policy (capability-based)\nname: child_policy\nversion: 1.0.0\ninherits: base_policy\ncapabilities:\n  - name: text_generation\n    description: Generate text responses\n    allowed: true\n    conditions:\n      - Must follow content guidelines.\n      - Must cite sources when appropriate.  # Added condition\n  - name: code_generation\n    description: Generate code\n    allowed: true  # New capability\nrestrictions:\n  - Must not retain user data.\n  - Must inform users about limitations.  # Added restriction\n</code></pre>"},{"location":"guides/inheritance/#model-based-inheritance","title":"Model-Based Inheritance","text":"<p>For model-based policies, inheritance works by merging model settings, defaults, and path rules:</p> <pre><code># Base policy (model-based)\nname: base_model_policy\nversion: 1.0.0\nmodel: assistant\ndefaults:\n  allow:\n    - review\n    - suggest\n  require:\n    - human_review\npaths:\n  \"src/**/*.py\":\n    allow:\n      - analyze\n    require:\n      - logging\n\n# Child policy (model-based)\nname: child_model_policy\nversion: 1.0.0\ninherits: base_model_policy\ndefaults:\n  allow:\n    - generate  # Added permission\n  require:\n    - human_review\npaths:\n  \"src/**/*.py\":\n    allow:\n      - analyze\n      - modify  # Added permission\n  \"docs/**\":\n    allow:\n      - generate  # New path rule\n</code></pre>"},{"location":"guides/inheritance/#inheritance-rules","title":"Inheritance Rules","text":""},{"location":"guides/inheritance/#common-rules","title":"Common Rules","text":"<ul> <li>Child policies must specify the parent policy using the <code>inherits</code> field</li> <li>Child policies must have the same or higher version number</li> <li>Child policies can add new settings but cannot remove parent settings</li> </ul>"},{"location":"guides/inheritance/#capability-based-rules","title":"Capability-Based Rules","text":"<ul> <li>Child policies can add new capabilities</li> <li>Child policies can modify existing capabilities by adding conditions</li> <li>Child policies can add new restrictions</li> <li>Child policies cannot remove parent capabilities or restrictions</li> </ul>"},{"location":"guides/inheritance/#model-based-rules","title":"Model-Based Rules","text":"<ul> <li>Child policies can add new permissions to defaults and paths</li> <li>Child policies can add new path patterns</li> <li>Child policies can add new requirements</li> <li>Child policies cannot remove parent permissions or requirements</li> </ul>"},{"location":"guides/inheritance/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/inheritance/#base-policies","title":"Base Policies","text":"<ul> <li>Define core capabilities or permissions</li> <li>Set default settings</li> <li>Establish common restrictions or requirements</li> <li>Provide a foundation for specialized policies</li> </ul>"},{"location":"guides/inheritance/#specialized-policies","title":"Specialized Policies","text":"<ul> <li>Inherit from base policies</li> <li>Add domain-specific capabilities or permissions</li> <li>Add context-specific conditions or requirements</li> <li>Customize for specific use cases</li> </ul>"},{"location":"guides/inheritance/#environment-specific-policies","title":"Environment-Specific Policies","text":"<ul> <li>Inherit from specialized policies</li> <li>Add environment-specific settings</li> <li>Adjust permissions based on environment (dev, test, prod)</li> <li>Fine-tune requirements for different contexts</li> </ul>"},{"location":"guides/inheritance/#best-practices","title":"Best Practices","text":"<ol> <li>Keep inheritance chains short (ideally no more than 2-3 levels)</li> <li>Document inheritance relationships clearly</li> <li>Test inherited policies thoroughly</li> <li>Version control all policies</li> <li>Use consistent naming conventions</li> <li>Validate policies after inheritance</li> <li>Use strict validation during development</li> </ol>"},{"location":"guides/inheritance/#examples","title":"Examples","text":"<p>See example inherited policies for detailed implementations.</p>"},{"location":"guides/inheritance/#see-also","title":"See Also","text":"<ul> <li>Policy Validation Guide</li> <li>Templates Guide</li> <li>Policy API</li> <li>CLI Reference</li> <li>Policy Format Examples</li> </ul>"},{"location":"guides/integration/","title":"Integrating ARIA with External Systems","text":"<p>This guide explains how to integrate ARIA with various external systems, supporting both capability-based and model-based policy formats.</p>"},{"location":"guides/integration/#overview","title":"Overview","text":"<p>ARIA can be integrated with:</p> <ul> <li>AI/ML frameworks</li> <li>CI/CD pipelines</li> <li>Governance systems</li> <li>Monitoring tools</li> <li>Custom applications</li> </ul>"},{"location":"guides/integration/#integration-methods","title":"Integration Methods","text":""},{"location":"guides/integration/#python-api-integration","title":"Python API Integration","text":"<p>The most direct method is to use ARIA's Python API:</p> <pre><code>from aria import Policy, Validator, Template\n\n# Load a policy (auto-detects format)\npolicy = Policy.from_file(\"policy.yml\")\n\n# Validate against a specific model or capability request\nvalidator = Validator(policy)\nresult = validator.validate(request_data)\n\nif result.is_valid:\n    # Proceed with AI operation\n    print(f\"Request approved: {result.message}\")\nelse:\n    # Handle validation failure\n    print(f\"Request denied: {result.message}\")\n    print(f\"Errors: {result.errors}\")\n</code></pre>"},{"location":"guides/integration/#rest-api-integration","title":"REST API Integration","text":"<p>For non-Python systems, use the REST API:</p> <pre><code># Start the ARIA API server\naria server start --port 8000\n\n# In another terminal or system\ncurl -X POST http://localhost:8000/validate \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"policy_path\": \"policy.yml\",\n    \"request\": {\n      \"operation\": \"text_generation\",\n      \"parameters\": {\n        \"prompt\": \"Write a story about...\"\n      }\n    }\n  }'\n</code></pre>"},{"location":"guides/integration/#cli-integration","title":"CLI Integration","text":"<p>For CI/CD pipelines or shell scripts:</p> <pre><code># Validate a request against a policy\naria validate policy.yml --request request.json\n\n# Exit code indicates success (0) or failure (1)\nif [ $? -eq 0 ]; then\n  echo \"Request approved\"\nelse\n  echo \"Request denied\"\nfi\n</code></pre>"},{"location":"guides/integration/#format-specific-integration","title":"Format-Specific Integration","text":""},{"location":"guides/integration/#capability-based-integration","title":"Capability-Based Integration","text":"<p>When working with capability-based policies:</p> <pre><code>from aria import Policy, Validator\n\n# Load a capability-based policy\npolicy = Policy.from_file(\"policy.yml\", format=\"capability\")\n\n# Create a capability request\nrequest = {\n    \"capability\": \"text_generation\",\n    \"parameters\": {\n        \"prompt\": \"Generate a story about...\",\n        \"max_tokens\": 500\n    },\n    \"context\": {\n        \"user_id\": \"user123\",\n        \"session_id\": \"session456\"\n    }\n}\n\n# Validate the request\nvalidator = Validator(policy)\nresult = validator.validate(request)\n\nif result.is_valid:\n    # Proceed with capability\n    pass\n</code></pre>"},{"location":"guides/integration/#model-based-integration","title":"Model-Based Integration","text":"<p>When working with model-based policies:</p> <pre><code>from aria import Policy, Validator\n\n# Load a model-based policy\npolicy = Policy.from_file(\"policy.yml\", format=\"model\")\n\n# Create a model request\nrequest = {\n    \"action\": \"generate\",\n    \"resource\": \"src/main.py\",\n    \"parameters\": {\n        \"prompt\": \"Add error handling to...\",\n        \"context\": \"function implementation\"\n    }\n}\n\n# Validate the request\nvalidator = Validator(policy)\nresult = validator.validate(request)\n\nif result.is_valid:\n    # Proceed with model action\n    pass\n</code></pre>"},{"location":"guides/integration/#integration-with-ai-frameworks","title":"Integration with AI Frameworks","text":""},{"location":"guides/integration/#openai-integration","title":"OpenAI Integration","text":"<pre><code>import openai\nfrom aria import Policy, Validator\n\n# Load policy\npolicy = Policy.from_file(\"policy.yml\")\nvalidator = Validator(policy)\n\n# Prepare OpenAI request\nopenai_request = {\n    \"model\": \"gpt-4\",\n    \"messages\": [\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Write code to...\"}\n    ]\n}\n\n# Convert to ARIA request format\naria_request = {\n    \"capability\": \"code_generation\" if policy.format == \"capability\" else None,\n    \"action\": \"generate\" if policy.format == \"model\" else None,\n    \"resource\": \"code\",\n    \"parameters\": openai_request\n}\n\n# Validate\nresult = validator.validate(aria_request)\n\nif result.is_valid:\n    # Proceed with OpenAI call\n    response = openai.ChatCompletion.create(**openai_request)\n    print(response.choices[0].message.content)\nelse:\n    print(f\"Policy violation: {result.message}\")\n</code></pre>"},{"location":"guides/integration/#hugging-face-integration","title":"Hugging Face Integration","text":"<pre><code>from transformers import pipeline\nfrom aria import Policy, Validator\n\n# Load policy\npolicy = Policy.from_file(\"policy.yml\")\nvalidator = Validator(policy)\n\n# Prepare Hugging Face request\nhf_request = {\n    \"model\": \"gpt2\",\n    \"prompt\": \"Write a story about...\",\n    \"max_length\": 100\n}\n\n# Convert to ARIA request format\naria_request = {\n    \"capability\": \"text_generation\" if policy.format == \"capability\" else None,\n    \"action\": \"generate\" if policy.format == \"model\" else None,\n    \"resource\": \"text\",\n    \"parameters\": hf_request\n}\n\n# Validate\nresult = validator.validate(aria_request)\n\nif result.is_valid:\n    # Proceed with Hugging Face call\n    generator = pipeline('text-generation', model=hf_request[\"model\"])\n    output = generator(hf_request[\"prompt\"], max_length=hf_request[\"max_length\"])\n    print(output[0][\"generated_text\"])\nelse:\n    print(f\"Policy violation: {result.message}\")\n</code></pre>"},{"location":"guides/integration/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"guides/integration/#github-actions-integration","title":"GitHub Actions Integration","text":"<pre><code># .github/workflows/aria-validation.yml\nname: ARIA Policy Validation\n\non:\n  pull_request:\n    paths:\n      - '**.py'\n      - '**.js'\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.10'\n\n      - name: Install ARIA\n        run: pip install aria-policy\n\n      - name: Validate AI operations\n        run: |\n          # Get changed files\n          FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})\n\n          # Validate each file against policy\n          for FILE in $FILES; do\n            aria validate policy.yml --resource \"$FILE\" --action modify\n            if [ $? -ne 0 ]; then\n              echo \"Policy violation in $FILE\"\n              exit 1\n            fi\n          done\n</code></pre>"},{"location":"guides/integration/#jenkins-pipeline-integration","title":"Jenkins Pipeline Integration","text":"<pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('ARIA Policy Validation') {\n            steps {\n                sh '''\n                    # Install ARIA\n                    pip install aria-policy\n\n                    # Get changed files\n                    FILES=$(git diff --name-only HEAD~1 HEAD)\n\n                    # Validate each file against policy\n                    for FILE in $FILES; do\n                        aria validate policy.yml --resource \"$FILE\" --action modify\n                        if [ $? -ne 0 ]; then\n                            echo \"Policy violation in $FILE\"\n                            exit 1\n                        fi\n                    done\n                '''\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"guides/integration/#best-practices","title":"Best Practices","text":"<ol> <li>Autodetect Policy Format: Use <code>Policy.from_file()</code> without specifying format to auto-detect.</li> <li>Validate Early: Integrate validation as early as possible in your workflow.</li> <li>Detailed Requests: Provide comprehensive information in requests for better validation.</li> <li>Handle Validation Failures: Always handle validation failures gracefully.</li> <li>Log Validation Results: Log all validation results for audit purposes.</li> <li>Use Strict Mode: Enable strict validation in production environments.</li> <li>Regular Updates: Keep policies updated as requirements change.</li> <li>Version Control: Store policies in version control alongside code.</li> </ol>"},{"location":"guides/integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/integration/#common-issues","title":"Common Issues","text":"<ol> <li>Format Detection Failures</li> <li>Ensure your policy file follows the correct schema</li> <li> <p>Explicitly specify format if auto-detection fails</p> </li> <li> <p>Validation Errors</p> </li> <li>Check validation result errors for details</li> <li>Ensure request format matches policy format</li> <li> <p>Verify all required fields are present</p> </li> <li> <p>Integration Issues</p> </li> <li>Confirm ARIA version compatibility</li> <li>Check API endpoint configuration</li> <li>Verify authentication if required</li> </ol>"},{"location":"guides/integration/#see-also","title":"See Also","text":"<ul> <li>Policy Validation Guide</li> <li>Templates Guide</li> <li>Policy API</li> <li>CLI Reference</li> <li>Policy Format Examples</li> </ul>"},{"location":"guides/license/","title":"License","text":"<p>ARIA is licensed under the Apache License 2.0.</p>"},{"location":"guides/license/#apache-license-20","title":"Apache License 2.0","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n</code></pre> <p>For the full license text, see the LICENSE file in the repository.</p>"},{"location":"guides/policy-validation/","title":"ARIA Policy Validation Guide","text":""},{"location":"guides/policy-validation/#introduction","title":"Introduction","text":"<p>This guide explains how to use ARIA's policy validation system to ensure your policies are correctly formatted and contain all required information. The validator supports two policy formats: capability-based (for testing) and model-based (for production).</p>"},{"location":"guides/policy-validation/#policy-formats","title":"Policy Formats","text":"<p>ARIA supports two primary policy formats:</p>"},{"location":"guides/policy-validation/#1-capability-based-policies","title":"1. Capability-Based Policies","text":"<p>Capability-based policies are primarily used for testing and focus on specific AI capabilities, conditions, and restrictions. This format is more human-readable and easier to understand for non-technical users.</p> <p>Example: <pre><code>name: capability_based_policy\nversion: 1.0.0\ndescription: Example of a capability-based policy\n\ncapabilities:\n  - name: code_generation\n    description: Generate code based on user requirements\n    allowed: true\n    conditions:\n      - Must include appropriate comments.\n\n  - name: data_analysis\n    description: Analyze data provided by the user\n    allowed: true\n    conditions:\n      - Must maintain data privacy.\n\nrestrictions:\n  - Must not retain user data beyond the session.\n</code></pre></p>"},{"location":"guides/policy-validation/#2-model-based-policies","title":"2. Model-Based Policies","text":"<p>Model-based policies are used in production environments and focus on model types, default permissions, and path-specific rules. This format is more suitable for integration with code repositories and CI/CD pipelines.</p> <p>Example: <pre><code>name: model_based_policy\nversion: 1.0.0\nmodel: assistant\ndefaults:\n  allow:\n    - review\n    - suggest\n  require:\n    - human_review\npaths:\n  \"src/**/*.py\":\n    allow:\n      - generate\n      - modify\n    require:\n      - unit_tests\n</code></pre></p>"},{"location":"guides/policy-validation/#using-the-policy-validator","title":"Using the Policy Validator","text":""},{"location":"guides/policy-validation/#basic-validation","title":"Basic Validation","text":"<p>To validate a policy file:</p> <pre><code>from aria.core.validator import PolicyValidator\n\nvalidator = PolicyValidator()\nresult = validator.validate_file(\"path/to/policy.yml\")\n\nif result.valid:\n    print(\"Policy is valid!\")\nelse:\n    print(\"Validation errors:\")\n    for error in result.errors:\n        print(f\"- {error}\")\n\n    if result.warnings:\n        print(\"Validation warnings:\")\n        for warning in result.warnings:\n            print(f\"- {warning}\")\n</code></pre>"},{"location":"guides/policy-validation/#strict-validation","title":"Strict Validation","text":"<p>For more thorough validation, enable strict mode:</p> <pre><code>result = validator.validate_file(\"path/to/policy.yml\", strict=True)\n</code></pre> <p>Strict validation performs additional checks: - Version format (semantic versioning) - Description length and quality - Capability description length and quality - Condition format (ending with a period) - Path pattern validity</p>"},{"location":"guides/policy-validation/#validating-policy-dictionaries","title":"Validating Policy Dictionaries","text":"<p>If you have a policy as a Python dictionary:</p> <pre><code>policy_data = {\n    \"version\": \"1.0.0\",\n    \"name\": \"Test Policy\",\n    \"capabilities\": [\n        {\n            \"name\": \"test_capability\",\n            \"description\": \"A test capability\",\n            \"allowed\": True\n        }\n    ]\n}\n\nresult = validator.validate_policy(policy_data)\n</code></pre>"},{"location":"guides/policy-validation/#common-validation-errors","title":"Common Validation Errors","text":""},{"location":"guides/policy-validation/#missing-required-fields","title":"Missing Required Fields","text":"<pre><code>Error: Missing required field 'name'\nError: Missing required field 'version'\n</code></pre>"},{"location":"guides/policy-validation/#invalid-capability-format","title":"Invalid Capability Format","text":"<pre><code>Error: Capability must have 'name', 'description', and 'allowed' fields\nError: Capability 'name' must be a string\n</code></pre>"},{"location":"guides/policy-validation/#invalid-model-based-policy","title":"Invalid Model-Based Policy","text":"<pre><code>Error: Invalid model type 'unknown_model'\nError: Invalid action 'unknown_action' for model 'assistant'\nError: Invalid path pattern '**'\n</code></pre>"},{"location":"guides/policy-validation/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Version Control: Keep your policies in version control alongside your code.</p> </li> <li> <p>Validate Early and Often: Validate policies during development to catch issues early.</p> </li> <li> <p>Use Strict Validation: Enable strict validation during development for more thorough checks.</p> </li> <li> <p>Document Policies: Include clear descriptions for policies, capabilities, and conditions.</p> </li> <li> <p>Test Both Formats: If your system needs to support both policy formats, test with both.</p> </li> <li> <p>Automate Validation: Include policy validation in your CI/CD pipeline.</p> </li> </ol>"},{"location":"guides/policy-validation/#see-also","title":"See Also","text":"<ul> <li>Validator API Reference</li> <li>Validation System Architecture</li> <li>Example Policies</li> </ul>"},{"location":"guides/self-testing/","title":"Testing ARIA on Itself","text":"<p>This guide demonstrates how to use ARIA to manage AI participation in the ARIA project itself, providing a practical example of how the framework can be applied.</p>"},{"location":"guides/self-testing/#overview","title":"Overview","text":"<p>We've created two policy files to demonstrate ARIA's capabilities:</p> <ol> <li>Main Policy (<code>aria_policy.yml</code>): Defines how AI can participate in different parts of the ARIA codebase</li> <li>Docs Protection Policy (<code>docs_protection_policy.yml</code>): A more restrictive policy that prevents any changes to the documentation folder</li> </ol>"},{"location":"guides/self-testing/#main-policy","title":"Main Policy","text":"<p>The main policy allows AI to suggest, modify, and generate code in the core ARIA modules, tests, and documentation, with appropriate safeguards:</p> <pre><code>name: \"ARIA Self-Policy\"\ndescription: \"Policy defining how AI can participate in the ARIA project itself\"\nversion: \"1.0\"\nmodel: \"assistant\"\n\ndefaults:\n  allow: [\"suggest\", \"review\"]  # Allow suggestions and reviews by default\n  require:\n    - human_review\n    - tests\n\npaths:\n  'aria/**/*.py':\n    allow: \n      - suggest\n      - modify\n      - generate\n    require:\n      - human_review\n      - tests\n      - documentation\n\n  'tests/**/*.py':\n    allow:\n      - suggest\n      - modify\n      - generate\n    require:\n      - test_coverage\n\n  'docs/**/*':\n    allow:\n      - suggest\n      - modify\n      - generate\n    require:\n      - human_review\n      - spell_check\n\n  '.github/**/*':\n    allow:\n      - suggest\n    require:\n      - human_review\n</code></pre>"},{"location":"guides/self-testing/#docs-protection-policy","title":"Docs Protection Policy","text":"<p>The docs protection policy demonstrates how to create a more restrictive policy that completely prevents changes to the documentation folder:</p> <pre><code>name: \"ARIA Docs Protection Policy\"\ndescription: \"Prevents changes to the docs folder\"\nversion: \"1.0\"\nmodel: \"guardian\"\n\ndefaults:\n  allow: [\"suggest\", \"review\"]  # Allow suggestions and reviews by default\n  require:\n    - human_review\n\npaths:\n  'docs/**/*':\n    allow: []  # No actions allowed on docs folder\n    effect: \"deny\"\n    require:\n      - human_review\n      - approval_by_docs_team\n</code></pre>"},{"location":"guides/self-testing/#testing-the-policies","title":"Testing the Policies","text":"<p>You can validate these policies using the ARIA CLI:</p> <pre><code># Validate the main policy\nariacli policy validate aria_policy.yml\n\n# Validate the docs protection policy\nariacli policy validate docs_protection_policy.yml\n</code></pre>"},{"location":"guides/self-testing/#using-the-policies-with-ai-tools","title":"Using the Policies with AI Tools","text":"<p>When working with AI tools on the ARIA codebase:</p> <ol> <li>The main policy allows AI to suggest and generate code in the core modules, with human review</li> <li>The docs protection policy prevents any AI modifications to documentation without explicit approval</li> </ol>"},{"location":"guides/self-testing/#testing-with-ide-rules","title":"Testing with IDE Rules","text":"<p>ARIA provides a tool to convert ARIA policies to various IDE rule formats, which can be used for immediate integration:</p> <pre><code># Convert an ARIA policy to Windsurf rules\npython -m aria.tools.policy_to_iderules aria_policy.yml\n\n# Convert an ARIA policy to Cursor rules\npython -m aria.tools.policy_to_iderules aria_policy.yml -i cursor\n</code></pre> <p>This creates rule files that IDEs like Windsurf and Cursor will automatically use to enforce your policy. The tool preserves existing content in rules files and only updates the ARIA policy section.</p> <p>For more information, see Using IDE Rules for ARIA Policies.</p>"},{"location":"guides/self-testing/#benefits-of-self-testing","title":"Benefits of Self-Testing","text":"<p>Using ARIA on itself provides several benefits:</p> <ol> <li>Dogfooding: We use our own product, experiencing it as users would</li> <li>Practical Example: Demonstrates real-world application of the framework</li> <li>Validation: Confirms that the policy system works as expected</li> <li>Documentation: Provides a concrete example for users to follow</li> </ol>"},{"location":"guides/self-testing/#next-steps","title":"Next Steps","text":"<p>After testing these policies, you might want to:</p> <ol> <li>Create more specialized policies for different parts of the codebase</li> <li>Integrate the policies with your CI/CD pipeline</li> <li>Develop custom validation rules specific to your project needs</li> </ol>"},{"location":"guides/templates/","title":"Working with Templates","text":"<p>This guide explains how to work with ARIA templates effectively.</p>"},{"location":"guides/templates/#what-are-templates","title":"What are Templates?","text":"<p>Templates are pre-defined policy configurations that help you: - Start quickly with common scenarios - Maintain consistency across policies - Follow best practices - Create both capability-based and model-based policies</p>"},{"location":"guides/templates/#template-formats","title":"Template Formats","text":"<p>ARIA supports two template formats that correspond to the two policy formats:</p>"},{"location":"guides/templates/#capability-based-templates","title":"Capability-Based Templates","text":"<ul> <li>Focus on specific AI capabilities</li> <li>Clear conditions and restrictions</li> <li>Simplified structure for non-technical users</li> <li>Ideal for testing and development</li> </ul>"},{"location":"guides/templates/#model-based-templates","title":"Model-Based Templates","text":"<ul> <li>Focus on model types and path-specific rules</li> <li>Integration with code repositories</li> <li>More granular control over permissions</li> <li>Ideal for production environments</li> </ul>"},{"location":"guides/templates/#available-templates","title":"Available Templates","text":"<ol> <li><code>chat_assistant</code> (Capability-based)</li> <li>Basic chat functionality</li> <li>Safety guardrails</li> <li>Error handling</li> <li> <p>Text generation capabilities</p> </li> <li> <p><code>code_assistant</code> (Model-based)</p> </li> <li>Code analysis</li> <li>Generation capabilities</li> <li>Security checks</li> <li> <p>Path-specific permissions</p> </li> <li> <p><code>review_assistant</code> (Model-based)</p> </li> <li>Code review capabilities</li> <li>Documentation generation</li> <li>Restricted modification permissions</li> <li> <p>Path-specific rules</p> </li> <li> <p><code>custom_assistant</code> (Both formats)</p> </li> <li>Fully customizable</li> <li>Advanced features</li> <li>Special use cases</li> <li>Support for both policy formats</li> </ol>"},{"location":"guides/templates/#using-templates","title":"Using Templates","text":"<pre><code># List available templates\naria list-templates\n\n# Apply a template (capability-based)\naria apply chat_assistant -o policy.yml\n\n# Apply a template (model-based)\naria apply code_assistant -o code-policy.yml\n\n# Apply with parameters\naria apply chat_assistant --param safety_level=high -o policy.yml\n\n# Customize a template\naria customize chat_assistant -o custom.yml\n</code></pre>"},{"location":"guides/templates/#template-structure","title":"Template Structure","text":""},{"location":"guides/templates/#capability-based-template-structure","title":"Capability-Based Template Structure","text":"<pre><code>name: template_name\nversion: 1.0.0\ndescription: Template purpose\ntype: capability\nparameters:\n  - name: param1\n    type: string\n    description: Parameter description\n    required: true\n    default: default_value\n    options:\n      - option1\n      - option2\ncapabilities:\n  - name: capability_name\n    description: Capability description\n    allowed: true\n    conditions:\n      - Condition text\nrestrictions:\n  - Restriction text\n</code></pre>"},{"location":"guides/templates/#model-based-template-structure","title":"Model-Based Template Structure","text":"<pre><code>name: template_name\nversion: 1.0.0\ndescription: Template purpose\ntype: model\nparameters:\n  - name: param1\n    type: string\n    description: Parameter description\n    required: true\n    default: default_value\nmodel: assistant\ndefaults:\n  allow:\n    - review\n    - suggest\n  require:\n    - human_review\npaths:\n  \"src/**/*.py\":\n    allow:\n      - generate\n      - modify\n    require:\n      - unit_tests\n</code></pre>"},{"location":"guides/templates/#customizing-templates","title":"Customizing Templates","text":"<p>Templates can be customized in several ways:</p> <ol> <li> <p>Parameter Customization: Provide parameter values when applying a template    <pre><code>aria apply chat_assistant --param safety_level=high\n</code></pre></p> </li> <li> <p>Template Modification: Create a modified version of an existing template    <pre><code>aria customize chat_assistant -o custom_template.yml\n</code></pre></p> </li> <li> <p>Template Inheritance: Create a new template that inherits from an existing one    <pre><code>name: custom_template\nversion: 1.0.0\ninherits: chat_assistant\ndescription: Customized chat assistant\n</code></pre></p> </li> </ol>"},{"location":"guides/templates/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the appropriate template format for your use case</li> <li>Capability-based for testing and human-readable policies</li> <li>Model-based for production and integration with code repositories</li> <li>Version your templates</li> <li>Document customizations</li> <li>Test before deployment</li> <li>Keep templates simple and focused</li> <li>Use parameters for customization points</li> <li>Validate templates before sharing</li> </ol>"},{"location":"guides/templates/#see-also","title":"See Also","text":"<ul> <li>Policy Validation Guide</li> <li>Policy Inheritance</li> <li>CLI Reference</li> <li>Template API</li> <li>Policy Format Examples</li> </ul>"},{"location":"guides/tool-integration/","title":"AI Tool Integration","text":"<p>This section covers how to integrate ARIA policies with various AI coding assistants and tools.</p>"},{"location":"guides/tool-integration/#available-integrations","title":"Available Integrations","text":"<p>ARIA can be integrated with several popular AI coding tools:</p> <ul> <li>Windsurf Integration</li> <li>Cursor Integration</li> <li>GitHub Copilot Integration</li> <li>Visual Studio Code Integration</li> <li>Using IDE Rules for ARIA Policies</li> </ul>"},{"location":"guides/tool-integration/#integration-approaches","title":"Integration Approaches","text":"<p>There are two main approaches to integrating ARIA with AI tools:</p> <ol> <li>Full SDK Integration: Developing plugins that use the ARIA SDK for complete policy enforcement</li> <li>Rules-Based Integration: Using existing rules mechanisms (like <code>.windsurfrules</code> or <code>.cursorrules</code>) for simpler implementation</li> </ol> <p>Choose the approach that best fits your needs: - Use Full SDK Integration for comprehensive policy enforcement with granular control - Use Rules-Based Integration for quick implementation with existing tools</p>"},{"location":"guides/tool-integration/#general-integration-approach","title":"General Integration Approach","text":"<p>While each tool has its specific integration method, the general approach follows these steps:</p> <ol> <li>Policy Loading: The integration loads your ARIA policy file</li> <li>Change Interception: The integration intercepts changes proposed by the AI tool</li> <li>Policy Validation: Changes are validated against the policy</li> <li>Enforcement: Based on validation results, changes are allowed, blocked, or flagged</li> </ol>"},{"location":"guides/tool-integration/#integration-architecture","title":"Integration Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             \u2502     \u2502              \u2502     \u2502             \u2502\n\u2502  AI Coding  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ARIA Policy  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Modified   \u2502\n\u2502    Tool     \u2502     \u2502  Validator   \u2502     \u2502   Files     \u2502\n\u2502             \u2502     \u2502              \u2502     \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u2502\n                           \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502              \u2502\n                    \u2502   Policy     \u2502\n                    \u2502    File      \u2502\n                    \u2502              \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"guides/tool-integration/#core-integration-components","title":"Core Integration Components","text":""},{"location":"guides/tool-integration/#1-policy-loader","title":"1. Policy Loader","text":"<p>Loads and parses ARIA policy files, handling inheritance and template application.</p>"},{"location":"guides/tool-integration/#2-change-analyzer","title":"2. Change Analyzer","text":"<p>Analyzes proposed changes to determine: - Which files are being modified - What type of modifications are being made - Which policy statements apply to these changes</p>"},{"location":"guides/tool-integration/#3-policy-enforcer","title":"3. Policy Enforcer","text":"<p>Enforces policy decisions by: - Blocking prohibited changes - Allowing permitted changes - Logging policy violations - Providing feedback to users</p>"},{"location":"guides/tool-integration/#creating-custom-integrations","title":"Creating Custom Integrations","text":"<p>If you need to integrate ARIA with a tool not listed here, you can create a custom integration using the ARIA API:</p> <pre><code>from aria.core.policy import PolicyManager\nfrom aria.core.validator import PolicyValidator\n\n# Load policy\npolicy_manager = PolicyManager()\npolicy = policy_manager.load_policy(\"./docs_protection_policy.yml\")\n\n# Create validator\nvalidator = PolicyValidator(policy)\n\n# Validate a proposed change\nresult = validator.validate_change(\n    file_path=\"docs/guides/getting-started.md\",\n    action=\"modify\",\n    actor=\"ai_assistant\"\n)\n\nif not result.is_allowed:\n    print(f\"Change not allowed: {result.reason}\")\n</code></pre>"},{"location":"guides/tool-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Clear Error Messages: Provide clear feedback when changes are blocked</li> <li>Performance Optimization: Cache policy validation results when possible</li> <li>Graceful Degradation: If policy validation fails, default to a safe mode</li> <li>User Override: Allow users to override policy decisions with proper authentication</li> <li>Audit Logging: Log all policy decisions for later review</li> </ol>"},{"location":"guides/tool-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to create custom policy validators</li> <li>Explore policy visualization tools</li> <li>Set up CI/CD integration</li> </ul>"},{"location":"guides/tool-integration/cursor/","title":"Integrating ARIA with Cursor","text":"<p>This guide explains how to integrate ARIA policies with the Cursor AI coding assistant.</p>"},{"location":"guides/tool-integration/cursor/#overview","title":"Overview","text":"<p>Cursor can be configured to respect ARIA policies through a custom extension that validates all AI-suggested changes against your policy files before applying them.</p>"},{"location":"guides/tool-integration/cursor/#integration-options","title":"Integration Options","text":"<p>Cursor offers two approaches for integrating with ARIA:</p> <ol> <li>Full ARIA Plugin Integration (as described below)</li> <li>Using Existing Cursor Rules (see Using IDE Rules for ARIA Policies)</li> </ol> <p>For quick implementation, consider using the existing <code>.cursorrules</code> mechanism, which requires no additional plugins.</p>"},{"location":"guides/tool-integration/cursor/#setup","title":"Setup","text":""},{"location":"guides/tool-integration/cursor/#1-install-the-aria-cursor-extension","title":"1. Install the ARIA-Cursor Extension","text":"<pre><code># Install the ARIA framework\npython -m pip install --user aria-framework\n\n# Install the Cursor extension\nnpm install -g aria-cursor-extension\n</code></pre>"},{"location":"guides/tool-integration/cursor/#2-configure-cursor","title":"2. Configure Cursor","text":"<p>Add the following to your Cursor configuration file:</p> <pre><code>{\n  \"extensions\": {\n    \"aria\": {\n      \"enabled\": true,\n      \"policyFile\": \"./docs_protection_policy.yml\",\n      \"enforcementLevel\": \"strict\",\n      \"violationAction\": \"prevent\"\n    }\n  }\n}\n</code></pre> <p>Configuration options: - <code>policyFile</code>: Path to your ARIA policy file - <code>enforcementLevel</code>: Level of enforcement (\"strict\", \"standard\", or \"relaxed\") - <code>violationAction</code>: Action to take when policy is violated (\"prevent\", \"warn\", or \"record\")</p>"},{"location":"guides/tool-integration/cursor/#how-it-works","title":"How It Works","text":"<ol> <li>When Cursor suggests code changes, the ARIA extension analyzes the changes</li> <li>The extension checks if the changes comply with your ARIA policy</li> <li>If the changes violate the policy (e.g., modifying files in a restricted directory), the extension takes the configured action</li> <li>For \"prevent\" mode, Cursor will display an error message and not apply the changes</li> </ol>"},{"location":"guides/tool-integration/cursor/#example-enforcing-docs-protection","title":"Example: Enforcing Docs Protection","text":"<p>With the <code>docs_protection_policy.yml</code> that denies changes to the docs folder:</p> <ol> <li>When Cursor attempts to modify a file in the docs folder, the ARIA extension checks the policy</li> <li>The extension detects that the policy denies modifications to the docs folder</li> <li>The change is blocked, and Cursor displays a message: \"This change violates the ARIA policy: docs folder modifications are not allowed\"</li> </ol>"},{"location":"guides/tool-integration/cursor/#command-line-interface","title":"Command Line Interface","text":"<p>You can also use the ARIA CLI to validate Cursor suggestions before applying them:</p> <pre><code># Export Cursor suggestions to a patch file\ncursor export-suggestions --format=patch &gt; suggestions.patch\n\n# Validate the patch against your ARIA policy\nariacli policy validate-patch --policy=docs_protection_policy.yml --patch=suggestions.patch\n\n# If validation passes, apply the patch\ngit apply suggestions.patch\n</code></pre>"},{"location":"guides/tool-integration/cursor/#enforcement-levels","title":"Enforcement Levels","text":"<p>The ARIA-Cursor extension supports different enforcement levels:</p> <ul> <li>Strict: Blocks any changes that violate the policy</li> <li>Standard: Blocks critical violations but allows minor ones with warnings</li> <li>Relaxed: Only warns about violations without blocking changes</li> </ul>"},{"location":"guides/tool-integration/cursor/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the ARIA-Cursor integration:</p> <ol> <li>Verify your policy file is valid: <code>ariacli policy validate your_policy.yml</code></li> <li>Check that the policy path in your Cursor configuration is correct</li> <li>Examine the Cursor extension logs for detailed error messages</li> </ol>"},{"location":"guides/tool-integration/cursor/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about custom policy rules for Cursor</li> <li>Set up automated policy checks in your workflow</li> <li>Explore policy visualization in Cursor</li> </ul>"},{"location":"guides/tool-integration/ide-rules/","title":"Using IDE Rules for ARIA Policies","text":"<p>This guide explains how to use existing IDE rule systems to implement ARIA policies without requiring additional plugins.</p>"},{"location":"guides/tool-integration/ide-rules/#overview","title":"Overview","text":"<p>Many AI-powered IDEs already have built-in rule systems: - Windsurf uses <code>.windsurfrules</code> - Cursor uses <code>.cursorrules</code> - Other IDEs have similar mechanisms</p> <p>We can leverage these existing mechanisms to enforce ARIA policies with minimal setup.</p>"},{"location":"guides/tool-integration/ide-rules/#converting-aria-policies-to-ide-rules","title":"Converting ARIA Policies to IDE Rules","text":""},{"location":"guides/tool-integration/ide-rules/#basic-conversion-examples","title":"Basic Conversion Examples","text":"ARIA Policy Statement Equivalent IDE Rule <code>deny</code> actions on <code>docs/**/*</code> <code>AI assistants must not modify files in the docs/ directory</code> <code>allow: [\"suggest\"]</code> on <code>src/**/*.py</code> <code>AI assistants may suggest changes to Python files in src/ but must not implement them directly</code> <code>require: [\"human_review\"]</code> <code>All AI-generated code must be reviewed by a human before being committed</code>"},{"location":"guides/tool-integration/ide-rules/#implementation-steps","title":"Implementation Steps","text":"<ol> <li>Create a rules file in your project root (e.g., <code>.windsurfrules</code> or <code>.cursorrules</code>)</li> <li>Translate your ARIA policy into natural language rules</li> <li>Add specific path restrictions for protected directories</li> </ol>"},{"location":"guides/tool-integration/ide-rules/#example-docs-protection-policy","title":"Example: Docs Protection Policy","text":"<p>Here's how to convert the <code>docs_protection_policy.yml</code> to IDE rules:</p> <pre><code># ARIA Policy Enforcement\n1. AI assistants must not modify, create, or delete any files in the docs/ directory\n2. AI assistants may suggest changes to documentation but must not implement them\n3. All documentation changes require human review and approval from the docs team\n</code></pre>"},{"location":"guides/tool-integration/ide-rules/#example-general-aria-policy","title":"Example: General ARIA Policy","text":"<p>For the main <code>aria_policy.yml</code>, you might use:</p> <pre><code># ARIA Policy Enforcement\n1. AI assistants may suggest and review code in all areas by default\n2. AI assistants may modify and generate code in the aria/ directory with human review\n3. AI assistants may modify and generate tests with appropriate test coverage\n4. AI assistants may suggest changes to GitHub workflows but must not implement them directly\n</code></pre>"},{"location":"guides/tool-integration/ide-rules/#using-the-conversion-tool","title":"Using the Conversion Tool","text":"<p>ARIA provides a tool to automatically convert policies to IDE rules:</p> <pre><code># Convert to Windsurf rules (default)\npython -m aria.tools.policy_to_iderules aria_policy.yml\n\n# Convert to Cursor rules\npython -m aria.tools.policy_to_iderules aria_policy.yml -i cursor\n\n# Convert to a custom rules file\npython -m aria.tools.policy_to_iderules aria_policy.yml -o custom_rules.txt\n</code></pre> <p>The tool preserves existing content in rules files and only updates the ARIA policy section.</p>"},{"location":"guides/tool-integration/ide-rules/#supported-ides","title":"Supported IDEs","text":"<p>Currently, the tool supports: - Windsurf (<code>.windsurfrules</code>) - Cursor (<code>.cursorrules</code>)</p> <p>Future support is planned for: - Visual Studio Code (<code>.vscode/aria-rules.json</code>) - Neovim (<code>.nvim/aria-rules.lua</code>) - Emacs (<code>.emacs.d/aria-rules.el</code>)</p>"},{"location":"guides/tool-integration/ide-rules/#limitations-of-current-implementation","title":"Limitations of Current Implementation","text":"<p>The current IDE integration has some important limitations to be aware of:</p> <ol> <li>Partial Enforcement: </li> <li>Ignore files (<code>.codeiumignore</code>, <code>.cursorignore</code>) provide technical enforcement by preventing AI from accessing certain files</li> <li> <p>Rule files (<code>.windsurfrules</code>, <code>.cursorrules</code>) provide policy guidance but don't technically prevent modifications</p> </li> <li> <p>Reliance on AI Behavior:</p> </li> <li>Rules rely on the AI assistant following them</li> <li> <p>There's no technical mechanism to prevent an AI from modifying files it can access</p> </li> <li> <p>Future Improvements:</p> </li> <li>Full IDE plugins are planned that will provide proper technical enforcement</li> <li>These will intercept and validate AI actions against policies before allowing them</li> </ol> <p>For maximum protection with the current implementation: - Use ignore files for truly sensitive files that AI should never access - Use rule files for files that AI can read but should not modify - Regularly audit AI-generated changes against your policies</p>"},{"location":"guides/tool-integration/ide-rules/#advantages-and-limitations","title":"Advantages and Limitations","text":""},{"location":"guides/tool-integration/ide-rules/#advantages","title":"Advantages","text":"<ul> <li>Uses existing IDE functionality</li> <li>No additional plugins required</li> <li>Simple to implement and understand</li> <li>Works immediately</li> </ul>"},{"location":"guides/tool-integration/ide-rules/#limitations","title":"Limitations","text":"<ul> <li>Less granular control than a full ARIA implementation</li> <li>Manual translation required (unless using the conversion tool)</li> <li>Enforcement depends on the AI assistant's compliance</li> <li>No programmatic validation</li> </ul>"},{"location":"guides/tool-integration/ide-rules/#best-practices","title":"Best Practices","text":"<ol> <li>Be explicit about which directories are protected</li> <li>Use clear language that both humans and AI can understand</li> <li>Organize rules by area of concern</li> <li>Update rules when your ARIA policies change</li> </ol>"},{"location":"guides/tool-integration/ide-rules/#ide-ignore-files","title":"IDE Ignore Files","text":"<p>In addition to rules files, many IDEs support ignore files that control which files the AI assistant can access. ARIA can generate these files based on your policy:</p> <ul> <li><code>.codeiumignore</code> for Windsurf</li> <li><code>.cursorignore</code> for Cursor</li> </ul> <p>These files follow the same syntax as <code>.gitignore</code> and help enforce your ARIA policy by:</p> <ol> <li>Protecting policy files themselves from AI modification</li> <li>Restricting AI access to sensitive paths defined in your policy</li> <li>Protecting IDE rule files from modification</li> </ol>"},{"location":"guides/tool-integration/ide-rules/#generating-ignore-files","title":"Generating Ignore Files","text":"<p>You can generate ignore files alongside rules files:</p> <pre><code>python -m aria.tools.policy_to_iderules policy.yml --ignore\n</code></pre> <p>This will generate both a rules file and an ignore file appropriate for your selected IDE.</p>"},{"location":"guides/tool-integration/ide-rules/#ignore-file-structure","title":"Ignore File Structure","text":"<p>The generated ignore files include:</p> <pre><code># BEGIN ARIA POLICY\n# ARIA Policy: Your Policy Name\n# Your policy description\n\n# Protect ARIA policy files\n*.aria.yaml\n*.aria.yml\n.aria/\n\n# Protect IDE rule files\n.windsurfrules\n.cursorrules\n...\n\n# Protect IDE ignore files\n.codeiumignore\n.cursorignore\n\n# Protected paths from ARIA policy\n/sensitive/path/\n/config/secrets.json\n...\n# END ARIA POLICY\n</code></pre>"},{"location":"guides/tool-integration/ide-rules/#benefits-of-ignore-files","title":"Benefits of Ignore Files","text":"<p>Using ignore files provides stronger enforcement than rules alone:</p> <ul> <li>Technical Enforcement: While rules rely on the AI assistant's compliance, ignore files technically prevent access</li> <li>Defense in Depth: Combining rules and ignore files creates multiple layers of protection</li> <li>Clear Boundaries: Explicitly defines which files are off-limits to AI assistance</li> </ul>"},{"location":"guides/tool-integration/ide-rules/#customizing-ignore-patterns","title":"Customizing Ignore Patterns","text":"<p>You can customize the generated ignore files by:</p> <ol> <li>Editing the patterns outside the ARIA policy section</li> <li>Modifying your ARIA policy to include different path protections</li> <li>Using a custom output file with the <code>--ignore-output</code> option</li> </ol>"},{"location":"guides/tool-integration/ide-rules/#future-integration","title":"Future Integration","text":"<p>While this approach works as an immediate solution, a full ARIA SDK would provide: - Automated policy translation - Programmatic enforcement - More granular control - Policy validation</p> <p>The ARIA project is actively working on developing plugins for various IDEs: - Windsurf - Cursor - Visual Studio Code - Neovim - Emacs - JetBrains IDEs</p>"},{"location":"guides/tool-integration/ide-rules/#next-steps","title":"Next Steps","text":"<ol> <li>Create your IDE rules file based on your ARIA policies</li> <li>Test with your IDE to ensure proper enforcement</li> <li>Consider contributing to the development of full ARIA plugins for your favorite IDE</li> </ol>"},{"location":"guides/tool-integration/windsurf/","title":"Integrating ARIA with Windsurf","text":"<p>This guide explains how to integrate ARIA policies with the Windsurf AI coding assistant.</p>"},{"location":"guides/tool-integration/windsurf/#overview","title":"Overview","text":"<p>Windsurf can be configured to respect ARIA policies through a custom integration that validates all AI-suggested changes against your policy files before applying them.</p>"},{"location":"guides/tool-integration/windsurf/#setup","title":"Setup","text":""},{"location":"guides/tool-integration/windsurf/#1-install-the-aria-windsurf-plugin","title":"1. Install the ARIA-Windsurf Plugin","text":"<pre><code># Install the ARIA framework\npython -m pip install --user aria-framework\n\n# Install the Windsurf plugin\npython -m pip install --user aria-windsurf-plugin\n</code></pre>"},{"location":"guides/tool-integration/windsurf/#2-configure-windsurf","title":"2. Configure Windsurf","text":"<p>Add the following to your Windsurf configuration file:</p> <pre><code>{\n  \"plugins\": {\n    \"aria\": {\n      \"enabled\": true,\n      \"policyPath\": \"./docs_protection_policy.yml\",\n      \"strictMode\": true,\n      \"onViolation\": \"block\"\n    }\n  }\n}\n</code></pre> <p>Configuration options: - <code>policyPath</code>: Path to your ARIA policy file - <code>strictMode</code>: If true, any policy validation errors will block changes - <code>onViolation</code>: Action to take when policy is violated (\"block\", \"warn\", or \"log\")</p>"},{"location":"guides/tool-integration/windsurf/#integration-options","title":"Integration Options","text":"<p>Windsurf offers two approaches for integrating with ARIA:</p> <ol> <li>Full ARIA Plugin Integration (as described below)</li> <li>Using Existing Windsurf Rules (see Using IDE Rules for ARIA Policies)</li> </ol> <p>For quick implementation, consider using the existing <code>.windsurfrules</code> mechanism, which requires no additional plugins.</p>"},{"location":"guides/tool-integration/windsurf/#plugin-architecture","title":"Plugin Architecture","text":""},{"location":"guides/tool-integration/windsurf/#how-it-works","title":"How It Works","text":"<ol> <li>When you use Windsurf to generate or modify code, the ARIA plugin intercepts the changes</li> <li>The plugin checks if the proposed changes comply with your ARIA policy</li> <li>If the changes violate the policy (e.g., modifying files in a restricted directory), the plugin blocks the changes</li> <li>Windsurf displays an error message explaining why the changes were blocked</li> </ol>"},{"location":"guides/tool-integration/windsurf/#example-enforcing-docs-protection","title":"Example: Enforcing Docs Protection","text":"<p>With the <code>docs_protection_policy.yml</code> that denies changes to the docs folder:</p> <ol> <li>When Windsurf attempts to modify a file in the docs folder, the ARIA plugin checks the policy</li> <li>The plugin detects that the policy denies modifications to the docs folder</li> <li>The change is blocked, and Windsurf displays a message: \"Changes to docs folder are not allowed per ARIA policy\"</li> </ol>"},{"location":"guides/tool-integration/windsurf/#programmatic-usage","title":"Programmatic Usage","text":"<p>You can also integrate ARIA validation directly in your Windsurf workflows:</p> <pre><code>from aria_windsurf import PolicyValidator\n\n# Initialize the validator with your policy\nvalidator = PolicyValidator(\"./docs_protection_policy.yml\")\n\n# Check if a file modification is allowed\nis_allowed = validator.check_modification(\"docs/guides/getting-started.md\")\nif not is_allowed:\n    print(\"This modification is not allowed by the ARIA policy\")\n</code></pre>"},{"location":"guides/tool-integration/windsurf/#customizing-behavior","title":"Customizing Behavior","text":"<p>You can customize how Windsurf responds to policy violations:</p> <ul> <li>Block Mode: Prevents any changes that violate the policy</li> <li>Warning Mode: Allows changes but displays warnings</li> <li>Logging Mode: Allows changes but logs violations for later review</li> </ul>"},{"location":"guides/tool-integration/windsurf/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the ARIA-Windsurf integration:</p> <ol> <li>Ensure your policy file is valid: <code>ariacli policy validate your_policy.yml</code></li> <li>Check that the policy path in your Windsurf configuration is correct</li> <li>Review the Windsurf logs for detailed error messages</li> </ol>"},{"location":"guides/tool-integration/windsurf/#next-steps","title":"Next Steps","text":"<ul> <li>Explore advanced configuration options</li> <li>Learn how to create custom policy validators for Windsurf</li> <li>Set up CI/CD integration to validate policies automatically</li> </ul>"},{"location":"technical/configuration/","title":"Configuration System","text":"<p>ARIA's configuration system provides a flexible way to manage AI participation policies and templates.</p>"},{"location":"technical/configuration/#overview","title":"Overview","text":"<p>The configuration system handles: - Policy file locations and naming conventions - Template directory structure - Default policy settings - Validation rules and constraints</p>"},{"location":"technical/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"technical/configuration/#policy-configuration","title":"Policy Configuration","text":"<p>Policy files use YAML format and follow a specific schema: <pre><code>version: \"1.0\"\nname: \"Policy Name\"\ndescription: \"Policy Description\"\nmodel: \"assistant\"  # One of: guardian, observer, assistant, collaborator, partner\nstatements:\n  - effect: \"allow\"\n    actions: [\"analyze\", \"review\"]\n    resources: [\"*\"]\npath_policies: []\n</code></pre></p>"},{"location":"technical/configuration/#template-configuration","title":"Template Configuration","text":"<p>Templates are stored in the <code>templates</code> directory and follow a similar structure: <pre><code>name: \"Template Name\"\nmodel: \"assistant\"\ndescription: \"Template Description\"\ntags: [\"tag1\", \"tag2\"]\nstatements:\n  - effect: \"allow\"\n    actions: [\"analyze\", \"review\"]\n    resources: [\"*\"]\n</code></pre></p>"},{"location":"technical/configuration/#configuration-api","title":"Configuration API","text":"<p>The configuration system is accessible through the <code>aria.core.config</code> module. See the Configuration API for detailed usage.</p>"},{"location":"technical/deployment/","title":"Deployment Guide","text":"<p>This guide covers deploying and integrating ARIA into your development workflow.</p>"},{"location":"technical/deployment/#cicd-integration","title":"CI/CD Integration","text":"<p>ARIA can be integrated into various CI/CD platforms:</p>"},{"location":"technical/deployment/#github-actions","title":"GitHub Actions","text":"<p>See GitHub Actions Integration for detailed setup.</p>"},{"location":"technical/deployment/#gitlab-ci","title":"GitLab CI","text":"<p>See GitLab CI Integration for detailed setup.</p>"},{"location":"technical/deployment/#jenkins","title":"Jenkins","text":"<p>See Jenkins Integration for detailed setup.</p>"},{"location":"technical/deployment/#installation","title":"Installation","text":""},{"location":"technical/deployment/#from-pypi","title":"From PyPI","text":"<pre><code>pip install aria-policy\n</code></pre>"},{"location":"technical/deployment/#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/antenore/ARIA.git\ncd ARIA\npip install -e .\n</code></pre>"},{"location":"technical/deployment/#configuration","title":"Configuration","text":"<ol> <li> <p>Initialize ARIA in your project:    <pre><code>aria init\n</code></pre></p> </li> <li> <p>Configure your policy:    <pre><code>aria policy validate aria-policy.yml\n</code></pre></p> </li> <li> <p>Apply templates:    <pre><code>aria template apply assistant\n</code></pre></p> </li> </ol>"},{"location":"technical/deployment/#best-practices","title":"Best Practices","text":"<ol> <li>Store policy files in version control</li> <li>Use CI/CD to validate policies</li> <li>Review policy changes in pull requests</li> <li>Document policy decisions</li> <li>Use templates for consistency</li> </ol>"},{"location":"technical/policy/","title":"ARIA Policy Implementation","text":""},{"location":"technical/policy/#overview","title":"Overview","text":"<p>ARIA's policy system provides a flexible and robust framework for managing AI participation in software projects. This document details the technical implementation of the policy system, which supports two distinct policy formats: capability-based (for testing) and model-based (for production).</p>"},{"location":"technical/policy/#policy-formats","title":"Policy Formats","text":""},{"location":"technical/policy/#capability-based-format","title":"Capability-Based Format","text":"<p>Designed primarily for testing and human readability: - Focus on specific AI capabilities - Clear conditions and restrictions - Simplified structure for non-technical users - Easier to understand and validate</p>"},{"location":"technical/policy/#model-based-format","title":"Model-Based Format","text":"<p>Designed for production environments: - Integration with code repositories - Path-specific rules - Predefined models with default settings - More granular control over permissions</p>"},{"location":"technical/policy/#core-components","title":"Core Components","text":""},{"location":"technical/policy/#aiaction-enum","title":"AIAction Enum","text":"<p>Defines possible AI interactions with the codebase: - <code>GENERATE</code>: Create new code - <code>MODIFY</code>: Change existing code - <code>SUGGEST</code>: Propose changes - <code>REVIEW</code>: Analyze code - <code>EXECUTE</code>: Run code or commands</p>"},{"location":"technical/policy/#aipermission-class","title":"AIPermission Class","text":"<p>Represents permission settings for specific actions: - Action type - Requirements (e.g., human review) - Constraints (e.g., path patterns)</p>"},{"location":"technical/policy/#policymodel-enum","title":"PolicyModel Enum","text":"<p>Predefined participation models: - <code>GUARDIAN</code>: Complete restriction - <code>OBSERVER</code>: Analysis and review only - <code>ASSISTANT</code>: Suggestions with human review - <code>COLLABORATOR</code>: Area-specific permissions - <code>PARTNER</code>: Maximum participation with guardrails</p>"},{"location":"technical/policy/#pathpolicy-class","title":"PathPolicy Class","text":"<p>Manages path-specific rules: - Path patterns - Allowed actions - Required validations - Inheritance rules</p>"},{"location":"technical/policy/#aipolicy-class","title":"AIPolicy Class","text":"<p>Overall policy management: - Policy loading/saving - Permission validation - Model enforcement - Path matching - Support for multiple policy formats</p>"},{"location":"technical/policy/#policymanager-class","title":"PolicyManager Class","text":"<p>Central policy coordination: - Policy configuration - Permission checking - Rule inheritance - Validation pipeline</p>"},{"location":"technical/policy/#implementation-details","title":"Implementation Details","text":""},{"location":"technical/policy/#capability-based-configuration","title":"Capability-Based Configuration","text":"<pre><code>version: 1.0.0\nname: test_policy\ndescription: A comprehensive test policy\ncapabilities:\n  - name: code_generation\n    description: Generate code based on user requirements\n    allowed: true\n    conditions:\n      - Must include appropriate comments.\n      - Must follow project coding standards.\nrestrictions:\n  - Must not retain user data beyond the session.\n  - Must inform users about limitations.\n</code></pre>"},{"location":"technical/policy/#model-based-configuration","title":"Model-Based Configuration","text":"<pre><code>version: 1.0.0\nname: production_policy\nmodel: ASSISTANT\ndefaults:\n  allow:\n    - review\n    - suggest\n  require:\n    - human_review\npaths:\n  'src/**/*.py':\n    allow:\n      - generate\n      - modify\n    require:\n      - unit_tests\n  'docs/**':\n    allow:\n      - generate\n      - format\n</code></pre>"},{"location":"technical/policy/#permission-checking","title":"Permission Checking","text":"<ol> <li>Detect policy format (capability or model-based)</li> <li>For model-based:</li> <li>Path matching using glob patterns</li> <li>Model-based permission inheritance</li> <li>Explicit permission validation</li> <li>Requirement verification</li> <li>For capability-based:</li> <li>Capability validation</li> <li>Condition checking</li> <li>Restriction enforcement</li> </ol>"},{"location":"technical/policy/#validation-pipeline","title":"Validation Pipeline","text":"<ol> <li>Common validation:</li> <li>Required fields check</li> <li>Type validation</li> <li>Format-specific validation:</li> <li>Capability-based validation</li> <li>Model-based validation</li> <li>Strict validation (optional):</li> <li>Enhanced quality checks</li> <li>Detailed warnings</li> <li>Result compilation</li> </ol>"},{"location":"technical/policy/#integration-points","title":"Integration Points","text":"<ul> <li>CI/CD hooks</li> <li>IDE plugins</li> <li>Git pre-commit hooks</li> <li>Policy documentation generation</li> </ul>"},{"location":"technical/policy/#best-practices","title":"Best Practices","text":""},{"location":"technical/policy/#policy-format-selection","title":"Policy Format Selection","text":"<ol> <li>Use capability-based format for:</li> <li>Testing and development</li> <li>Non-technical stakeholders</li> <li>Simple use cases</li> <li>Use model-based format for:</li> <li>Production environments</li> <li>Complex codebases</li> <li>Integration with CI/CD</li> </ol>"},{"location":"technical/policy/#policy-definition","title":"Policy Definition","text":"<ol> <li>Start with a restrictive model</li> <li>Use explicit permissions</li> <li>Define clear path patterns</li> <li>Document requirements</li> </ol>"},{"location":"technical/policy/#policy-management","title":"Policy Management","text":"<ol> <li>Regular policy reviews</li> <li>Version control integration</li> <li>Automated validation</li> <li>Clear documentation</li> </ol>"},{"location":"technical/policy/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Enhanced policy analytics</li> <li>Machine learning-based policy recommendations</li> <li>Automated policy testing</li> <li>Integration with more development tools</li> <li>Policy visualization tools</li> </ol>"},{"location":"technical/templates/","title":"Template System Architecture","text":""},{"location":"technical/templates/#overview","title":"Overview","text":"<p>ARIA's template system provides a flexible way to create, manage, and apply policy templates. The system supports both capability-based templates (for testing) and model-based templates (for production).</p>"},{"location":"technical/templates/#design-goals","title":"Design Goals","text":"<ol> <li>Flexibility</li> <li>Support multiple use cases</li> <li>Easy customization</li> <li>Version control</li> <li> <p>Multiple template formats</p> </li> <li> <p>Maintainability</p> </li> <li>Clear structure</li> <li>Documentation</li> <li>Testing support</li> <li> <p>Format-specific validation</p> </li> <li> <p>Performance</p> </li> <li>Efficient validation</li> <li>Quick application</li> <li>Minimal overhead</li> <li> <p>Optimized parsing</p> </li> <li> <p>Usability</p> </li> <li>Intuitive parameter system</li> <li>Clear error messages</li> <li>Format detection</li> <li>Inheritance support</li> </ol>"},{"location":"technical/templates/#template-formats","title":"Template Formats","text":""},{"location":"technical/templates/#capability-based-format","title":"Capability-Based Format","text":"<p>Designed primarily for testing and human readability: - Focus on specific AI capabilities - Clear conditions and restrictions - Simplified structure for non-technical users - Easier to understand and validate</p>"},{"location":"technical/templates/#model-based-format","title":"Model-Based Format","text":"<p>Designed for production environments: - Integration with code repositories - Path-specific rules - Predefined models with default settings - More granular control over permissions</p>"},{"location":"technical/templates/#system-components","title":"System Components","text":""},{"location":"technical/templates/#template-engine","title":"Template Engine","text":"<pre><code>graph TD\n    A[Template Source] --&gt; B[Format Detector]\n    B --&gt; C1[Capability Parser]\n    B --&gt; C2[Model Parser]\n    C1 --&gt; D[Validator]\n    C2 --&gt; D\n    D --&gt; E[Parameter Processor]\n    E --&gt; F[Policy Generator]\n    F --&gt; G[Result]</code></pre>"},{"location":"technical/templates/#template-structure","title":"Template Structure","text":""},{"location":"technical/templates/#capability-based-template","title":"Capability-Based Template","text":"<pre><code>name: capability_template\nversion: 1.0.0\ndescription: Template for capability-based policies\ntype: capability\nparameters:\n  - name: capability_level\n    type: string\n    description: Level of capabilities to enable\n    default: basic\n    options:\n      - basic\n      - advanced\n      - expert\ncapabilities:\n  - name: code_generation\n    description: Generate code based on user requirements\n    allowed: true\n    conditions:\n      - Must include appropriate comments.\n</code></pre>"},{"location":"technical/templates/#model-based-template","title":"Model-Based Template","text":"<pre><code>name: model_template\nversion: 1.0.0\ndescription: Template for model-based policies\ntype: model\nparameters:\n  - name: security_level\n    type: string\n    description: Security level for the policy\n    default: standard\n    options:\n      - minimal\n      - standard\n      - strict\nmodel: assistant\ndefaults:\n  allow:\n    - review\n    - suggest\n</code></pre>"},{"location":"technical/templates/#implementation-details","title":"Implementation Details","text":""},{"location":"technical/templates/#template-detection","title":"Template Detection","text":"<pre><code>def detect_template_format(data: Dict[str, Any]) -&gt; str:\n    \"\"\"Detect template format (capability or model).\n\n    Args:\n        data: Template data\n\n    Returns:\n        \"capability\" or \"model\"\n    \"\"\"\n    if \"type\" in data:\n        return data[\"type\"]\n    elif \"capabilities\" in data:\n        return \"capability\"\n    elif \"model\" in data:\n        return \"model\"\n    else:\n        # Default to capability-based\n        return \"capability\"\n</code></pre>"},{"location":"technical/templates/#template-loading","title":"Template Loading","text":"<pre><code>def load_template(path: str) -&gt; Template:\n    \"\"\"Load a template from file.\n\n    Args:\n        path: Path to template file\n\n    Returns:\n        Template instance\n    \"\"\"\n    with open(path) as f:\n        data = yaml.safe_load(f)\n\n    template_format = detect_template_format(data)\n    if template_format == \"capability\":\n        return CapabilityTemplate(**data)\n    else:\n        return ModelTemplate(**data)\n</code></pre>"},{"location":"technical/templates/#parameter-processing","title":"Parameter Processing","text":"<pre><code>def process_parameters(template: Template, params: Dict[str, Any]) -&gt; Template:\n    \"\"\"Process and apply parameters to a template.\n\n    Args:\n        template: Template instance\n        params: Parameter values\n\n    Returns:\n        Updated template\n    \"\"\"\n    for name, value in params.items():\n        template.set_parameter(name, value)\n\n    return template\n</code></pre>"},{"location":"technical/templates/#template-application","title":"Template Application","text":"<pre><code>def apply_template(template: Template, policy: Policy = None) -&gt; Policy:\n    \"\"\"Apply a template to create or update a policy.\n\n    Args:\n        template: Template instance\n        policy: Optional existing policy to update\n\n    Returns:\n        New or updated policy\n    \"\"\"\n    if policy is None:\n        if isinstance(template, CapabilityTemplate):\n            policy = CapabilityPolicy(template.name)\n        else:\n            policy = ModelPolicy(template.name)\n\n    # Apply template-specific logic\n    template.apply(policy)\n\n    return policy\n</code></pre>"},{"location":"technical/templates/#validation-process","title":"Validation Process","text":"<ol> <li>Schema validation</li> <li>Required fields</li> <li>Field types</li> <li>Format-specific requirements</li> <li>Parameter validation</li> <li>Required parameters</li> <li>Parameter types</li> <li>Option validation</li> <li>Content validation</li> <li>Capability validation for capability templates</li> <li>Model and path validation for model templates</li> <li>Inheritance validation</li> <li>Parent template exists</li> <li>Compatible formats</li> <li>No circular dependencies</li> </ol>"},{"location":"technical/templates/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the appropriate template format</li> <li>Capability-based for testing and human-readable policies</li> <li>Model-based for production and integration with code repositories</li> <li>Version templates</li> <li>Document parameters</li> <li>Test thoroughly</li> <li>Keep templates focused</li> <li>Use inheritance for common patterns</li> <li>Validate before distribution</li> </ol>"},{"location":"technical/templates/#see-also","title":"See Also","text":"<ul> <li>Templates API</li> <li>Template Guide</li> <li>Example Templates</li> <li>Policy Format Examples</li> </ul>"},{"location":"technical/validation/","title":"Validation System Architecture","text":""},{"location":"technical/validation/#overview","title":"Overview","text":"<p>ARIA's validation system ensures the integrity and correctness of policies and templates. The system supports multiple policy formats to accommodate both testing and production use cases.</p>"},{"location":"technical/validation/#design-goals","title":"Design Goals","text":"<ol> <li>Reliability</li> <li>Comprehensive checks</li> <li>Clear error messages</li> <li> <p>Consistent results</p> </li> <li> <p>Performance</p> </li> <li>Fast validation</li> <li>Minimal memory usage</li> <li> <p>Efficient algorithms</p> </li> <li> <p>Extensibility</p> </li> <li>Custom validators</li> <li>Plugin support</li> <li> <p>Easy updates</p> </li> <li> <p>Flexibility</p> </li> <li>Support for multiple policy formats</li> <li>Strict and standard validation modes</li> <li>Customizable validation rules</li> </ol>"},{"location":"technical/validation/#policy-formats","title":"Policy Formats","text":"<p>ARIA supports two primary policy formats:</p>"},{"location":"technical/validation/#1-capability-based-policies-testing","title":"1. Capability-Based Policies (Testing)","text":"<pre><code>version: \"1.0.0\"\nname: \"Test Policy\"\ndescription: \"A comprehensive test policy for validation.\"\ncapabilities:\n  - name: \"test_capability\"\n    description: \"A detailed test capability description.\"\n    allowed: true\n    conditions:\n      - \"Must follow all testing guidelines.\"\n      - \"Must document all test cases.\"\nrestrictions:\n  - \"No unauthorized testing.\"\n  - \"Must follow security protocols.\"\n</code></pre>"},{"location":"technical/validation/#2-model-based-policies-production","title":"2. Model-Based Policies (Production)","text":"<pre><code>version: \"1.0.0\"\nname: \"Production Policy\"\nmodel: \"assistant\"\ndefaults:\n  allow:\n    - \"review\"\n    - \"suggest\"\n  require:\n    - \"human_review\"\npaths:\n  \"src/**/*.py\":\n    allow:\n      - \"analyze\"\n      - \"review\"\n  \"tests/**\":\n    allow:\n      - \"generate\"\n      - \"modify\"\n</code></pre>"},{"location":"technical/validation/#validation-pipeline","title":"Validation Pipeline","text":"<pre><code>graph TD\n    A[Input Policy] --&gt; B[Required Fields Check]\n    B --&gt; C[Type Validation]\n    C --&gt; D[Format-Specific Validation]\n    D --&gt; E1[Capability Validation]\n    D --&gt; E2[Model-Based Validation]\n    E1 --&gt; F[Strict Validation]\n    E2 --&gt; F\n    F --&gt; G[Validation Result]</code></pre>"},{"location":"technical/validation/#validation-components","title":"Validation Components","text":""},{"location":"technical/validation/#validationresult","title":"ValidationResult","text":"<p>The <code>ValidationResult</code> class stores validation outcomes:</p> <pre><code>class ValidationResult:\n    \"\"\"Represents a policy validation result.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize validation result.\"\"\"\n        self.valid: bool = True\n        self.errors: List[str] = []\n        self.warnings: List[str] = []\n\n    def add_error(self, message: str) -&gt; None:\n        \"\"\"Add an error message.\"\"\"\n\n    def add_warning(self, message: str) -&gt; None:\n        \"\"\"Add a warning message.\"\"\"\n</code></pre>"},{"location":"technical/validation/#policyvalidator","title":"PolicyValidator","text":"<p>The <code>PolicyValidator</code> class performs the actual validation:</p> <pre><code>class PolicyValidator:\n    \"\"\"Validates AI participation policies.\"\"\"\n\n    def validate_file(self, path: Union[str, Path], strict: bool = False) -&gt; ValidationResult:\n        \"\"\"Validate a policy file.\"\"\"\n\n    def validate_policy(self, policy: Dict[str, Any], strict: bool = False) -&gt; ValidationResult:\n        \"\"\"Validate policy data.\"\"\"\n</code></pre>"},{"location":"technical/validation/#validation-rules","title":"Validation Rules","text":""},{"location":"technical/validation/#common-rules-both-formats","title":"Common Rules (Both Formats)","text":"<ul> <li>Required fields: version, name</li> <li>Version must be a string</li> <li>Name must be present</li> </ul>"},{"location":"technical/validation/#capability-based-rules","title":"Capability-Based Rules","text":"<ul> <li>Capabilities must be a list</li> <li>Each capability must have name, description, and allowed fields</li> <li>Conditions must be a list if present</li> <li>Restrictions must be a list if present</li> </ul>"},{"location":"technical/validation/#model-based-rules","title":"Model-Based Rules","text":"<ul> <li>Model must be a valid PolicyModel value</li> <li>Actions must be allowed for the specified model</li> <li>Requirements must be valid for the specified model</li> <li>Path patterns must be valid</li> </ul>"},{"location":"technical/validation/#strict-validation-rules","title":"Strict Validation Rules","text":"<ul> <li>Version should follow semantic versioning</li> <li>Description should be sufficiently detailed</li> <li>Capability descriptions should be sufficiently detailed</li> <li>Conditions should end with a period</li> <li>Path patterns should not be too broad or too specific</li> </ul>"},{"location":"technical/validation/#best-practices","title":"Best Practices","text":"<ol> <li>Always validate policies before applying them</li> <li>Use strict validation during development</li> <li>Provide clear error messages to users</li> <li>Handle validation errors and warnings appropriately</li> <li>Test with both policy formats if needed</li> </ol>"},{"location":"technical/validation/#see-also","title":"See Also","text":"<ul> <li>Validator API</li> <li>Policy Guide</li> <li>Example Policies</li> </ul>"}]}