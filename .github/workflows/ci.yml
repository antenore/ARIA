name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install types-PyYAML
        pip install .[test,docs]
        pip install pytest pytest-cov flake8 mypy
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports aria/
        
    - name: Run tests with pytest
      id: coverage
      run: |
        pytest tests/ --cov=aria --cov-report=xml
        echo "coverage=$(python -c "import xml.etree.ElementTree as ET; print(float(ET.parse('coverage.xml').getroot().get('line-rate'))*100)")" >> $GITHUB_OUTPUT
        coverage=$(python -c "import xml.etree.ElementTree as ET; print(float(ET.parse('coverage.xml').getroot().get('line-rate'))*100)")
        if (( $(echo "$coverage >= 90" | bc -l) )); then
          echo "color=brightgreen" >> $GITHUB_OUTPUT
        elif (( $(echo "$coverage >= 80" | bc -l) )); then
          echo "color=green" >> $GITHUB_OUTPUT
        elif (( $(echo "$coverage >= 70" | bc -l) )); then
          echo "color=yellow" >> $GITHUB_OUTPUT
        elif (( $(echo "$coverage >= 60" | bc -l) )); then
          echo "color=orange" >> $GITHUB_OUTPUT
        else
          echo "color=red" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate coverage badge
      if: success() || failure()
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ secrets.GIST_ID }}
        filename: aria_coverage.json
        label: coverage
        message: ${{ steps.coverage.outputs.coverage }}%
        color: ${{ steps.coverage.outputs.color }}
        
    - name: Generate CI status badge
      if: always()
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ secrets.GIST_ID }}
        filename: aria_ci_status.json
        label: CI
        message: ${{ job.status }}
        color: ${{ job.status == 'success' && 'brightgreen' || job.status == 'failure' && 'red' || 'yellow' }}
        
  docs:
    runs-on: ubuntu-latest
    # Only run on main branch push, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test  # Only build and deploy docs if tests pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-minify-plugin mkdocs-exclude

    - name: Build documentation
      run: |
        mkdocs build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        # This requires setting up a deploy key with write access
        # See docs/GITHUB_PAGES_SETUP.md for instructions
        deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
        publish_dir: ./site  # The folder the action should deploy
        force_orphan: true   # Use a single-commit history for the gh-pages branch
        full_commit_message: 'docs: update documentation site'
